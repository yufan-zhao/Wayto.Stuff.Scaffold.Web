/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var uxmid_dll;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/uxmid-core/dist/uxmid.js":
/*!***********************************************!*\
  !*** ./node_modules/uxmid-core/dist/uxmid.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/*!\r\n * uxmid-core v1.0.0 \r\n *\r\n * @Authors:\r\n *      jason <jasonsoop@gmail.com>\r\n *      Evan <skcy@vip.qq.com>\r\n * \r\n * @Date:  2019-06-25 16:05:55\r\n * @version: 1.0.0\r\n * Licensed under the MIT License.\r\n * Copyright (C) 2010-2019 UXmid Inc. All rights reserved. \r\n */\r\n(function (global, factory) {\r\n\t true ? module.exports = factory() :\r\n\t0;\r\n}(this, function () { 'use strict';\r\n\r\n\tvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\r\n\r\n\tfunction unwrapExports (x) {\r\n\t\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\r\n\t}\r\n\r\n\tfunction createCommonjsModule(fn, module) {\r\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\r\n\t}\r\n\r\n\tvar exception = createCommonjsModule(function (module, exports) {\r\n\t/**\r\n\t * 表示在应用程序执行期间发生的错误。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\r\n\t    var extendStatics = function (d, b) {\r\n\t        extendStatics = Object.setPrototypeOf ||\r\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t        return extendStatics(d, b);\r\n\t    };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Exception = /** @class */ (function (_super) {\r\n\t    __extends(Exception, _super);\r\n\t    function Exception(name, message) {\r\n\t        var _this = _super.call(this) || this;\r\n\t        _this.name = \"\";\r\n\t        _this.message = \"\";\r\n\t        _this.name = name;\r\n\t        _this.message = message;\r\n\t        return _this;\r\n\t    }\r\n\t    return Exception;\r\n\t}(Error));\r\n\texports.default = Exception;\r\n\t});\r\n\r\n\tunwrapExports(exception);\r\n\r\n\tvar argumentException = createCommonjsModule(function (module, exports) {\r\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\r\n\t    var extendStatics = function (d, b) {\r\n\t        extendStatics = Object.setPrototypeOf ||\r\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t        return extendStatics(d, b);\r\n\t    };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * 当向方法提供的参数之一无效时引发的异常。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar ArgumentException = /** @class */ (function (_super) {\r\n\t    __extends(ArgumentException, _super);\r\n\t    function ArgumentException(message) {\r\n\t        return _super.call(this, \"ArgumentException\", message) || this;\r\n\t    }\r\n\t    return ArgumentException;\r\n\t}(exception.default));\r\n\texports.default = ArgumentException;\r\n\t});\r\n\r\n\tunwrapExports(argumentException);\r\n\r\n\tvar invalidOperationException = createCommonjsModule(function (module, exports) {\r\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\r\n\t    var extendStatics = function (d, b) {\r\n\t        extendStatics = Object.setPrototypeOf ||\r\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t        return extendStatics(d, b);\r\n\t    };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * 当方法调用对于对象的当前状态无效时引发的异常。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar InvalidOperationException = /** @class */ (function (_super) {\r\n\t    __extends(InvalidOperationException, _super);\r\n\t    function InvalidOperationException(message) {\r\n\t        return _super.call(this, \"InvalidOperationException\", message) || this;\r\n\t    }\r\n\t    return InvalidOperationException;\r\n\t}(exception.default));\r\n\texports.default = InvalidOperationException;\r\n\t});\r\n\r\n\tunwrapExports(invalidOperationException);\r\n\r\n\tvar exceptions = createCommonjsModule(function (module, exports) {\r\n\t/*!\r\n\t * @Authors:\r\n\t *      jason <jasonsoop@gmail.com>\r\n\t *      Evan <skcy@vip.qq.com>\r\n\t *\r\n\t * @Date:  2019-06-25 16:05:55\r\n\t * @version: 1.0.0\r\n\t * Licensed under the MIT License.\r\n\t * Copyright (C) 2010-present UXmid Inc. All rights reserved.\r\n\t */\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\texports.ArgumentException = argumentException.default;\r\n\r\n\texports.Exception = exception.default;\r\n\r\n\texports.InvalidOperationException = invalidOperationException.default;\r\n\t});\r\n\r\n\tunwrapExports(exceptions);\r\n\tvar exceptions_1 = exceptions.ArgumentException;\r\n\tvar exceptions_2 = exceptions.Exception;\r\n\tvar exceptions_3 = exceptions.InvalidOperationException;\r\n\r\n\tvar eventArgs = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * EventArgs 类作为创建事件参数的基类，当发生事件时，EventArgs 实例将作为参数传递给事件侦听器。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar EventArgs = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化 EventArgs 类的新实例。\r\n\t     * @constructor\r\n\t     * @param  {string} type 事件类型。\r\n\t     * @param  {any} data 可选数据。\r\n\t     */\r\n\t    function EventArgs(type, data) {\r\n\t        if (!type) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        this._type = type;\r\n\t        this._data = data;\r\n\t    }\r\n\t    Object.defineProperty(EventArgs.prototype, \"type\", {\r\n\t        /**\r\n\t         * 获取一个字符串值，表示事件的类型。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._type;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(EventArgs.prototype, \"source\", {\r\n\t        /**\r\n\t         * 获取或设置事件源对象。\r\n\t         * @property\r\n\t         * @returns any\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._source;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            if (!value) {\r\n\t                throw new exceptions.ArgumentException();\r\n\t            }\r\n\t            this._source = value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(EventArgs.prototype, \"data\", {\r\n\t        /**\r\n\t         * 获取或设置与事件关联的可选数据。\r\n\t         * @property\r\n\t         * @returns any\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._data;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._data = value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    return EventArgs;\r\n\t}());\r\n\texports.default = EventArgs;\r\n\t});\r\n\r\n\tunwrapExports(eventArgs);\r\n\r\n\tvar cancelEventArgs = createCommonjsModule(function (module, exports) {\r\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\r\n\t    var extendStatics = function (d, b) {\r\n\t        extendStatics = Object.setPrototypeOf ||\r\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t        return extendStatics(d, b);\r\n\t    };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * 为可取消的事件提供数据。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar CancelEventArgs = /** @class */ (function (_super) {\r\n\t    __extends(CancelEventArgs, _super);\r\n\t    function CancelEventArgs() {\r\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n\t        _this._cancel = false;\r\n\t        return _this;\r\n\t    }\r\n\t    Object.defineProperty(CancelEventArgs.prototype, \"cancel\", {\r\n\t        /**\r\n\t         * 获取或设置指示是否应取消事件。\r\n\t         * @property\r\n\t         * @returns boolean\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._cancel;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._cancel = value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    return CancelEventArgs;\r\n\t}(eventArgs.default));\r\n\texports.default = CancelEventArgs;\r\n\t});\r\n\r\n\tunwrapExports(cancelEventArgs);\r\n\r\n\tvar enumerator = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * 表示一个默认的枚举器。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar Enumerator = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化 Enumerator<T> 类的新实例。\r\n\t     * @constructor\r\n\t     * @param  {Array<T>} items 要枚举的元素。\r\n\t     */\r\n\t    function Enumerator(items) {\r\n\t        if (!items) {\r\n\t            throw new exceptions.ArgumentException(\"items\");\r\n\t        }\r\n\t        this._index = 0;\r\n\t        this._current = undefined;\r\n\t        this._items = items;\r\n\t    }\r\n\t    Object.defineProperty(Enumerator.prototype, \"current\", {\r\n\t        /**\r\n\t         * 获取当前遍历的值。\r\n\t         * @summary 如果已经遍历结束，则返回 undefined。\r\n\t         * @property\r\n\t         * @returns T\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._current;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 将枚举数推进到集合的下一个元素。\r\n\t     * @returns boolean 如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。\r\n\t     */\r\n\t    Enumerator.prototype.next = function () {\r\n\t        var items = this._items;\r\n\t        if (this._index < items.length) {\r\n\t            this._current = items[this._index++];\r\n\t            return true;\r\n\t        }\r\n\t        else {\r\n\t            return false;\r\n\t        }\r\n\t    };\r\n\t    return Enumerator;\r\n\t}());\r\n\texports.default = Enumerator;\r\n\t});\r\n\r\n\tunwrapExports(enumerator);\r\n\r\n\tvar keyValuePair = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t/**\r\n\t * 定义可设置或检索的键/值对。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar KeyValuePair = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化 KeyValuePair<K, V> 类的新实例。\r\n\t     * @param  {K} key 每个键/值对中定义的对象。\r\n\t     * @param  {V} value 与 key 相关联的定义。\r\n\t     */\r\n\t    function KeyValuePair(key, value) {\r\n\t        this._key = key;\r\n\t        this._value = value;\r\n\t    }\r\n\t    Object.defineProperty(KeyValuePair.prototype, \"key\", {\r\n\t        /**\r\n\t         * 获取键/值对中的键。\r\n\t         * @property\r\n\t         * @returns K\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._key;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(KeyValuePair.prototype, \"value\", {\r\n\t        /**\r\n\t         * 获取键/值对中的值。\r\n\t         * @property\r\n\t         * @returns V\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 使用键和值的字符串表示形式返回 KeyValuePair<K, V> 的字符串表示形式。\r\n\t     * @override\r\n\t     * @returns string\r\n\t     */\r\n\t    KeyValuePair.prototype.toString = function () {\r\n\t        return \"[\" + (this._key || \"\") + \", \" + (this._value || \"\") + \"]\";\r\n\t    };\r\n\t    return KeyValuePair;\r\n\t}());\r\n\texports.default = KeyValuePair;\r\n\t});\r\n\r\n\tunwrapExports(keyValuePair);\r\n\r\n\tvar map = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\t/**\r\n\t * 表示一个用于存储键值对的数据结构。\r\n\t * @class\r\n\t * @description Map 类似于对象，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar Map = /** @class */ (function () {\r\n\t    function Map() {\r\n\t        this._keys = []; // 键列表\r\n\t        this._values = []; // 值列表\r\n\t    }\r\n\t    Object.defineProperty(Map.prototype, \"size\", {\r\n\t        /**\r\n\t         * 获取 Map<K, V> 中实际包含的成员总数。\r\n\t         * @property\r\n\t         * @returns number\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._keys.length;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 设置键名 key 对应的键值为 value，然后返回整个 Map<K, V> 结构。\r\n\t     * 如果 key 已经有值，则键值会被更新，否则就新生成该键。\r\n\t     * @param  {K} key 键。\r\n\t     * @param  {V} value 值。\r\n\t     * @returns void\r\n\t     */\r\n\t    Map.prototype.set = function (key, value) {\r\n\t        var keys = this._keys, index = keys.indexOf(key);\r\n\t        if (index === -1) {\r\n\t            index = keys.length;\r\n\t            keys[index] = key;\r\n\t        }\r\n\t        this._values[index] = value;\r\n\t        return this;\r\n\t    };\r\n\t    /**\r\n\t     * 读取 key 对应的键值，如果找不到 key，返回 undefined。\r\n\t     * @param  {K} key 键。\r\n\t     * @returns V\r\n\t     */\r\n\t    Map.prototype.get = function (key) {\r\n\t        var index = this._keys.indexOf(key);\r\n\t        return index !== -1 ? this._values[index] : undefined;\r\n\t    };\r\n\t    /**\r\n\t     * 确定 Map<K, V> 是否包含指定的键。\r\n\t     * @param  {K} key 键。\r\n\t     * @returns boolean 如果 Map<K, V> 包含具有指定键的成员，则为 true；否则为 false。\r\n\t     */\r\n\t    Map.prototype.has = function (key) {\r\n\t        return this._keys.indexOf(key) !== -1;\r\n\t    };\r\n\t    /**\r\n\t     * 从 Map<K, V> 中删除指定的键对应的项。\r\n\t     * @param  {K} key 键。\r\n\t     * @returns boolean  如果成功找到并移除该项，则为 true；否则为 false。\r\n\t     */\r\n\t    Map.prototype.delete = function (key) {\r\n\t        var index = this._keys.indexOf(key);\r\n\t        if (index !== -1) {\r\n\t            // 删除键和值\r\n\t            this._keys.splice(index, 1);\r\n\t            this._values.splice(index, 1);\r\n\t            return true;\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\t    /**\r\n\t     * 清除所有键和值。\r\n\t     * @returns void\r\n\t     */\r\n\t    Map.prototype.clear = function () {\r\n\t        this._keys.length = 0;\r\n\t        this._values.length = 0;\r\n\t    };\r\n\t    /**\r\n\t     * 返回一个循环访问集合的枚举器。\r\n\t     * @returns IEnumerator\r\n\t     */\r\n\t    Map.prototype.getEnumerator = function () {\r\n\t        var entries = this.entries();\r\n\t        return new enumerator.default(entries);\r\n\t    };\r\n\t    /**\r\n\t     * 对 IEnumerable<T> 进行迭代处理。\r\n\t     * @param  {Function} callback 每次迭代中执行的回掉函数，当前迭代项将传入该函数。\r\n\t     * @param  {any} scope 回掉函数中 this 所引用的对象。\r\n\t     * @returns void\r\n\t     */\r\n\t    Map.prototype.forEach = function (callback, scope) {\r\n\t        var keys = this._keys, values = this._values;\r\n\t        for (var i = 0, len = keys.length; i < len; i++) {\r\n\t            callback.call(scope, new keyValuePair.default(keys[i], values[i]), this);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 获取包含 Map<K, V> 中的键列表。\r\n\t     * @returns Array\r\n\t     */\r\n\t    Map.prototype.keys = function () {\r\n\t        return this._keys.concat();\r\n\t    };\r\n\t    /**\r\n\t     * 获取包含 Map<K, V> 中的值列表。\r\n\t     * @returns Array\r\n\t     */\r\n\t    Map.prototype.values = function () {\r\n\t        return this._values.concat();\r\n\t    };\r\n\t    /**\r\n\t     * 获取包含 Map<K, V> 中的成员列表。\r\n\t     * @returns Array\r\n\t     */\r\n\t    Map.prototype.entries = function () {\r\n\t        var entries = new Array();\r\n\t        this.forEach(function (item, source) {\r\n\t            entries.push(new keyValuePair.default(item.key, item.value));\r\n\t        });\r\n\t        return entries;\r\n\t    };\r\n\t    /**\r\n\t     * 返回 Map<K, V> 的字符串表示形式。\r\n\t     * @override\r\n\t     * @returns string\r\n\t     */\r\n\t    Map.prototype.toString = function () {\r\n\t        var obj = Object.create(null);\r\n\t        this.forEach(function (item, source) {\r\n\t            obj[item.key] = item.value;\r\n\t        });\r\n\t        return JSON.stringify(obj);\r\n\t    };\r\n\t    return Map;\r\n\t}());\r\n\texports.default = Map;\r\n\t});\r\n\r\n\tunwrapExports(map);\r\n\r\n\tvar set = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * 表示一个强类型列表。提供用于对列表进行搜索、排序和操作的方法。\r\n\t * @class\r\n\t * @description Set<T> 接受 null 作为引用类型的有效值，但是不允许有重复的元素。\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar Set = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化 Set<T> 的新实例。\r\n\t     * @param values 初始化参数\r\n\t     */\r\n\t    function Set() {\r\n\t        var _a;\r\n\t        var values = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            values[_i] = arguments[_i];\r\n\t        }\r\n\t        this._values = [];\r\n\t        (_a = this._values).push.apply(_a, values);\r\n\t    }\r\n\t    Object.defineProperty(Set.prototype, \"size\", {\r\n\t        /**\r\n\t         * 获取 Set<T> 中实际包含的元素总数。\r\n\t         * @property\r\n\t         * @returns number\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._values.length;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 将元素添加到 Set<T> 的结尾处。\r\n\t     * @param values 要添加到 Set<T> 末尾处的元素。\r\n\t     * @returns Set\r\n\t     */\r\n\t    Set.prototype.add = function () {\r\n\t        var values = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            values[_i] = arguments[_i];\r\n\t        }\r\n\t        for (var _a = 0, values_1 = values; _a < values_1.length; _a++) {\r\n\t            var value = values_1[_a];\r\n\t            if (!this.has(value)) {\r\n\t                this._values.push(value);\r\n\t            }\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    /**\r\n\t     * 获取指定索引处的元素。\r\n\t     * @param  {number} index 要获得或设置的元素从零开始的索引。\r\n\t     * @returns T 指定索引处的元素。\r\n\t     */\r\n\t    Set.prototype.get = function (index) {\r\n\t        return this._values[index];\r\n\t    };\r\n\t    /**\r\n\t     * 设置指定索引处的元素。\r\n\t     * @param  {number} index 设置的元素从零开始的索引。\r\n\t     * @param  {T} value 元素值。\r\n\t     * @returns void\r\n\t     */\r\n\t    Set.prototype.set = function (index, value) {\r\n\t        var values = this._values;\r\n\t        if (index >= 0 && index < values.length) {\r\n\t            if (!this.has(value)) {\r\n\t                values[index] = value;\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 从 Set<T> 中移除特定元素的匹配项。\r\n\t     * @param  {T} value 要从 Set<T> 中移除的元素。\r\n\t     * @returns boolean 如果成功移除 value，则为 true；否则为 false。如果在 Set<T> 中没有找到 value，该方法也会返回 false。\r\n\t     */\r\n\t    Set.prototype.delete = function (value) {\r\n\t        var values = this._values, index = values.indexOf(value);\r\n\t        if (index !== -1) {\r\n\t            values.splice(index, 1);\r\n\t            return true;\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\t    /**\r\n\t     * 移除 Set<T> 的指定索引处的元素。\r\n\t     * @param  {number} index 要移除的元素的从零开始的索引。\r\n\t     * @returns void\r\n\t     */\r\n\t    Set.prototype.deleteAt = function (index) {\r\n\t        var values = this._values;\r\n\t        if (index >= 0 && index < values.length) {\r\n\t            values.splice(index, 1);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 从 Set<T> 中移除所有元素。\r\n\t     * @returns void\r\n\t     */\r\n\t    Set.prototype.clear = function () {\r\n\t        this._values.length = 0;\r\n\t    };\r\n\t    /**\r\n\t     * 搜索指定的元素，并返回整个 Set<T> 中第一个匹配项的从零开始的索引。\r\n\t     * @param  {T} value 要在 Set<T> 中定位的元素。对于引用类型，该值可以为 null。\r\n\t     * @param  {number} index 从零开始的搜索的起始索引。\r\n\t     * @returns number 如果在整个 Set<T> 中找到 value 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。\r\n\t     */\r\n\t    Set.prototype.indexOf = function (value, index) {\r\n\t        return this._values.indexOf(value, index);\r\n\t    };\r\n\t    /**\r\n\t     * 确定某元素是否在 Set<T> 中。\r\n\t     * @param  {T} value 要在 Set<T> 中定位的元素。对于引用类型，该值可以为 null。\r\n\t     * @returns boolean 如果在 Set<T> 中找到 value，则为 true，否则为 false。\r\n\t     */\r\n\t    Set.prototype.has = function (value) {\r\n\t        return this._values.indexOf(value) !== -1;\r\n\t    };\r\n\t    /**\r\n\t     * 返回一个循环访问集合的枚举器。\r\n\t     * @returns IEnumerator\r\n\t     */\r\n\t    Set.prototype.getEnumerator = function () {\r\n\t        return new enumerator.default(this._values);\r\n\t    };\r\n\t    Set.prototype.forEach = function () {\r\n\t        var values = this._values, callback = arguments[0], scope = arguments[1], \r\n\t        // tslint:disable-next-line:no-magic-numbers\r\n\t        fromEnumerable = callback.length === 2; // 标识是否从 IEnumerable 接口调用\r\n\t        for (var i = 0, len = values.length; i < len; i++) {\r\n\t            fromEnumerable ? callback.call(scope, values[i], this) : callback.call(scope, values[i], i, this);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 搜索与指定谓词所定义的条件相匹配的元素，并返回 Set<T> 中第一个匹配元素。\r\n\t     * @param  {Function} callback 定义要搜索的元素的条件。\r\n\t     * @param  {any} scope 回掉函数中 this 所引用的对象。\r\n\t     * @returns T\r\n\t     */\r\n\t    Set.prototype.find = function (callback, scope) {\r\n\t        var values = this._values;\r\n\t        for (var i = 0, len = values.length; i < len; i++) {\r\n\t            if (callback.call(scope, values[i], i, this)) {\r\n\t                return values[i];\r\n\t            }\r\n\t        }\r\n\t        return undefined;\r\n\t    };\r\n\t    /**\r\n\t     * 使用指定的比较器对整个 Set<T> 中的元素进行排序。\r\n\t     * @param  {Function} comparer 比较元素时要使用的比较器函数。\r\n\t     * @returns void\r\n\t     */\r\n\t    Set.prototype.sort = function (comparer) {\r\n\t        var values = this._values;\r\n\t        this._values = values.sort(comparer);\r\n\t    };\r\n\t    /**\r\n\t     * 将指定的 ISet<T> 合并到当前 ISet<T> 中。\r\n\t     * @param  {ISet<T>} second 需要合并的数据源。\r\n\t     * @returns ISet\r\n\t     */\r\n\t    Set.prototype.union = function (source) {\r\n\t        var values = source.values();\r\n\t        if (values.length > 0) {\r\n\t            this.add.apply(this, values);\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    /**\r\n\t     * 获取包含 Set<T> 中的值列表。\r\n\t     * @returns Array\r\n\t     */\r\n\t    Set.prototype.values = function () {\r\n\t        return this._values.concat();\r\n\t    };\r\n\t    /**\r\n\t     * 返回 Set<T> 的字符串表示形式。\r\n\t     * @override\r\n\t     * @returns string\r\n\t     */\r\n\t    Set.prototype.toString = function () {\r\n\t        return Array.prototype.toString.call(this._values);\r\n\t    };\r\n\t    return Set;\r\n\t}());\r\n\texports.default = Set;\r\n\t});\r\n\r\n\tunwrapExports(set);\r\n\r\n\tvar collections = createCommonjsModule(function (module, exports) {\r\n\t/*!\r\n\t * @Authors:\r\n\t *      jason <jasonsoop@gmail.com>\r\n\t *      Evan <skcy@vip.qq.com>\r\n\t *\r\n\t * @Date:  2019-06-25 16:05:55\r\n\t * @version: 1.0.0\r\n\t * Licensed under the MIT License.\r\n\t * Copyright (C) 2010-present UXmid Inc. All rights reserved.\r\n\t */\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\texports.Enumerator = enumerator.default;\r\n\r\n\texports.KeyValuePair = keyValuePair.default;\r\n\r\n\texports.Map = map.default;\r\n\r\n\texports.Set = set.default;\r\n\t});\r\n\r\n\tunwrapExports(collections);\r\n\tvar collections_1 = collections.Enumerator;\r\n\tvar collections_2 = collections.KeyValuePair;\r\n\tvar collections_3 = collections.Map;\r\n\tvar collections_4 = collections.Set;\r\n\r\n\tvar type = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * 提供一些常用类型检测与反射相关的方法。\r\n\t * @static\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar Type = /** @class */ (function () {\r\n\t    /**\r\n\t     * 私有构造方法，使类型成为静态类。\r\n\t     * @private\r\n\t     */\r\n\t    function Type() {\r\n\t    }\r\n\t    /**\r\n\t     * 检测一个值是否为数组。\r\n\t     * @static\r\n\t     * @param  {any} value\r\n\t     * @returns boolean\r\n\t     */\r\n\t    Type.isArray = function (value) {\r\n\t        return this.getTypeString(value) === \"array\";\r\n\t    };\r\n\t    /**\r\n\t     * 检测一个值是否为对象。\r\n\t     * @static\r\n\t     * @param  {any} value\r\n\t     * @returns boolean\r\n\t     */\r\n\t    Type.isObject = function (value) {\r\n\t        return this.getTypeString(value) === \"object\";\r\n\t    };\r\n\t    /**\r\n\t     * 检测一个值是否为字符串。\r\n\t     * @static\r\n\t     * @param  {any} value\r\n\t     * @returns boolean\r\n\t     */\r\n\t    Type.isString = function (value) {\r\n\t        return typeof value === \"string\";\r\n\t    };\r\n\t    /**\r\n\t     * 检测一个值是否为日期。\r\n\t     * @static\r\n\t     * @param  {any} value\r\n\t     * @returns boolean\r\n\t     */\r\n\t    Type.isDate = function (value) {\r\n\t        return this.getTypeString(value) === \"date\";\r\n\t    };\r\n\t    /**\r\n\t     * 检测一个值是否为正则表达式。\r\n\t     * @static\r\n\t     * @param  {any} value\r\n\t     * @returns boolean\r\n\t     */\r\n\t    Type.isRegExp = function (value) {\r\n\t        return this.getTypeString(value) === \"regexp\";\r\n\t    };\r\n\t    /**\r\n\t     * 检测一个值是否为函数。\r\n\t     * @static\r\n\t     * @param  {any} value\r\n\t     * @returns boolean\r\n\t     */\r\n\t    Type.isFunction = function (value) {\r\n\t        return typeof value === \"function\";\r\n\t    };\r\n\t    /**\r\n\t     * 检测一个值是否为布尔值。\r\n\t     * @static\r\n\t     * @param  {any} value\r\n\t     * @returns boolean\r\n\t     */\r\n\t    Type.isBoolean = function (value) {\r\n\t        return typeof value === \"boolean\";\r\n\t    };\r\n\t    /**\r\n\t     * 检测一个值是否为数值。\r\n\t     * @static\r\n\t     * @param  {any} value\r\n\t     * @returns boolean\r\n\t     */\r\n\t    Type.isNumber = function (value) {\r\n\t        return typeof value === \"number\";\r\n\t    };\r\n\t    /**\r\n\t     * 检测一个值是否为 null。\r\n\t     * @static\r\n\t     * @param  {any} value\r\n\t     * @returns boolean\r\n\t     */\r\n\t    Type.isNull = function (value) {\r\n\t        return value === null;\r\n\t    };\r\n\t    /**\r\n\t     * 检测一个值是否为 undefined。\r\n\t     * @static\r\n\t     * @param  {any} value\r\n\t     * @returns boolean\r\n\t     */\r\n\t    Type.isUndefined = function (value) {\r\n\t        return typeof value === \"undefined\";\r\n\t    };\r\n\t    /**\r\n\t     * 检测一个值是否为 null 或 undefined。\r\n\t     * @static\r\n\t     * @param  {any} value\r\n\t     * @returns boolean\r\n\t     */\r\n\t    Type.isEmptyObject = function (value) {\r\n\t        return Type.isNull(value) || Type.isUndefined(value);\r\n\t    };\r\n\t    /**\r\n\t     * 表示一个字符串值是否为 null 或 undefined 或 空值。\r\n\t     * @static\r\n\t     * @param  {string} value 要检测的字符串实例。\r\n\t     * @returns boolean\r\n\t     */\r\n\t    Type.isEmptyString = function (value) {\r\n\t        return Type.isEmptyObject(value) || value.trim() === \"\";\r\n\t    };\r\n\t    /**\r\n\t     * 设置指定类型的元数据。\r\n\t     * @param  {any} type 目标类型。\r\n\t     * @param  {any} metadata 元数据。\r\n\t     * @returns void\r\n\t     */\r\n\t    Type.setMetadata = function (type, metadata) {\r\n\t        if (!type || !metadata) {\r\n\t            throw new Error();\r\n\t        }\r\n\t        this._metadatas.set(type, metadata);\r\n\t    };\r\n\t    /**\r\n\t     * 获取指定类型的元数据。\r\n\t     * @param  {any} type 目标类型。\r\n\t     * @returns any 元数据。\r\n\t     */\r\n\t    Type.getMetadata = function (type) {\r\n\t        return this._metadatas.get(type) || null;\r\n\t    };\r\n\t    /**\r\n\t     * 返回对象的类型(即构造函数)。\r\n\t     * @param  {string|any} value 实例或类型路径。\r\n\t     * @returns Function 如果成功解析则返回类型的构造函数，否则为 undefined。\r\n\t     */\r\n\t    Type.getClassType = function (value) {\r\n\t        if (Type.isNull(value)) {\r\n\t            return null;\r\n\t        }\r\n\t        else if (Type.isUndefined(value)) {\r\n\t            return undefined;\r\n\t        }\r\n\t        else if (Type.isBoolean(value)) {\r\n\t            return Boolean;\r\n\t        }\r\n\t        else if (Type.isNumber(value)) {\r\n\t            return Number;\r\n\t        }\r\n\t        else if (Type.isString(value)) {\r\n\t            try {\r\n\t                // 通过 eval 解析字符串所指向的实际类型\r\n\t                // tslint:disable-next-line:no-eval\r\n\t                var ctor = eval(value);\r\n\t                return Type.isFunction(ctor) ? ctor : String;\r\n\t            }\r\n\t            catch (e) {\r\n\t                return String;\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            var prototype = value.prototype ? value.prototype : Object.getPrototypeOf(value);\r\n\t            return prototype.constructor;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 返回 value 参数指定的对象的类名。\r\n\t     * @param  {any} value 需要取得类名称的对象，可以将任何 JavaScript 值传递给此方法，包括所有可用的 JavaScript 类型、对象实例、原始类型（如number)和类对象。\r\n\t     * @returns string 类名称的字符串。\r\n\t     */\r\n\t    Type.getClassName = function (value) {\r\n\t        var className = this.getQualifiedClassName(value).split(\".\");\r\n\t        return className[className.length - 1];\r\n\t    };\r\n\t    /**\r\n\t     * 返回 value 参数指定的对象的完全限定类名。\r\n\t     * @static\r\n\t     * @param  {any} value 需要取得完全限定类名称的对象，可以将任何 JavaScript 值传递给此方法，包括所有可用的 JavaScript 类型、对象实例、原始类型（如number)和类对象。\r\n\t     * @returns string 包含完全限定类名称的字符串。\r\n\t     */\r\n\t    Type.getQualifiedClassName = function (value) {\r\n\t        var type = typeof value;\r\n\t        if (!value || (type !== \"object\" && !value.prototype)) {\r\n\t            return type;\r\n\t        }\r\n\t        var prototype = value.prototype ? value.prototype : Object.getPrototypeOf(value);\r\n\t        if (prototype.hasOwnProperty(\"__class__\")) {\r\n\t            return prototype[\"__class__\"];\r\n\t        }\r\n\t        var constructorString = prototype.constructor.toString().trim();\r\n\t        var index = constructorString.indexOf(\"(\");\r\n\t        // tslint:disable-next-line:no-magic-numbers\r\n\t        var className = constructorString.substring(9, index);\r\n\t        Object.defineProperty(prototype, \"__class__\", {\r\n\t            value: className,\r\n\t            enumerable: false,\r\n\t            writable: true\r\n\t        });\r\n\t        return className;\r\n\t    };\r\n\t    /**\r\n\t     * 返回 value 参数指定的对象的基类的类名。\r\n\t     * @param  {any} value 需要取得父类类名称的对象，可以将任何 JavaScript 值传递给此方法，包括所有可用的 JavaScript 类型、对象实例、原始类型（如number）和类对象。\r\n\t     * @returns string 基类名称，或 null（如果不存在基类名称）。\r\n\t     */\r\n\t    Type.getSuperclassName = function (value) {\r\n\t        var className = this.getQualifiedSuperclassName(value).split(\".\");\r\n\t        return className[className.length - 1];\r\n\t    };\r\n\t    /**\r\n\t     * 返回 value 参数指定的对象的基类的完全限定类名。\r\n\t     * @param  {any} value 需要取得父类完全限定类名称的对象，可以将任何 JavaScript 值传递给此方法，包括所有可用的 JavaScript 类型、对象实例、原始类型（如number）和类对象。\r\n\t     * @returns string 完全限定的基类名称，或 null（如果不存在基类名称）。\r\n\t     */\r\n\t    Type.getQualifiedSuperclassName = function (value) {\r\n\t        if (!value || (typeof value !== \"object\" && !value.prototype)) {\r\n\t            return null;\r\n\t        }\r\n\t        var prototype = value.prototype ? value.prototype : Object.getPrototypeOf(value);\r\n\t        var superProto = Object.getPrototypeOf(prototype);\r\n\t        if (!superProto) {\r\n\t            return null;\r\n\t        }\r\n\t        var superClass = this.getQualifiedClassName(superProto.constructor);\r\n\t        if (!superClass) {\r\n\t            return null;\r\n\t        }\r\n\t        return superClass;\r\n\t    };\r\n\t    /**\r\n\t     * 确定指定类型的实例是否可以分配给当前类型的实例。\r\n\t     * @param  {Function} parentType 指定基类的类型。\r\n\t     * @param  {Function} subType 指定的实例类型。\r\n\t     * @returns boolean\r\n\t     */\r\n\t    Type.isAssignableFrom = function (parentType, subType) {\r\n\t        // 两个参数任意却少一个都不会进行比较\r\n\t        if (!parentType || !subType) {\r\n\t            return false;\r\n\t        }\r\n\t        // 如果基类等于子类，则直接返回 true\r\n\t        if (parentType === subType) {\r\n\t            return true;\r\n\t        }\r\n\t        // 如果基类是 Object 则直接返回 true\r\n\t        if (parentType === Object || parentType === \"Object\") {\r\n\t            return true;\r\n\t        }\r\n\t        // 获取子类的原型实例\r\n\t        var subPrototype = subType.prototype;\r\n\t        // 1.首先，如果原型中有定义\"__types__\"则直接根据类型名称查找\r\n\t        // 注意: \"__types__\" 这个属性是由 TypeScript 引擎在生成代码时加入的\r\n\t        if (subPrototype.hasOwnProperty(\"__types__\")) {\r\n\t            // 如果参数 parentType 不是字符串则获取基类的完全限定名称(包含命名空间)\r\n\t            var parentName = Type.isString(parentType) ? parentType : Type.getQualifiedClassName(parentType);\r\n\t            // 通过\"__types__\"去匹配基类名称\r\n\t            return subPrototype[\"__types__\"].indexOf(parentName) !== -1;\r\n\t        }\r\n\t        // 2.其次，如果类型没有定义\"__types__\"，则根据原型链进行查找\r\n\t        // 获取子类的直属父类型(即上一级父类)\r\n\t        var superType = Object.getPrototypeOf(subPrototype).constructor;\r\n\t        // 如果已经查到顶层还没匹配到，则直接返回 false\r\n\t        if (superType === Object) {\r\n\t            return false;\r\n\t        }\r\n\t        if (Type.isString(parentType)) {\r\n\t            // 如果传进来的基类是字符串，则根据上级父类的名称进行匹配\r\n\t            if (Type.getQualifiedClassName(superType) === parentType) {\r\n\t                return true;\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            // 否则根据传递进来的基类与直属父类进行匹配\r\n\t            if (superType === parentType) {\r\n\t                return true;\r\n\t            }\r\n\t        }\r\n\t        // 3.最后，如果当前层没匹配到，则通过递归原型向上一级一级查找\r\n\t        return Type.isAssignableFrom(parentType, superType);\r\n\t    };\r\n\t    /**\r\n\t     * 获取指定值的类型字符串(小写)。\r\n\t     * @private\r\n\t     * @static\r\n\t     * @param  {any} value\r\n\t     * @returns string\r\n\t     */\r\n\t    Type.getTypeString = function (value) {\r\n\t        return Object.prototype.toString.call(value).slice(8, -1).toLowerCase();\r\n\t    };\r\n\t    Type._metadatas = new collections.Map();\r\n\t    return Type;\r\n\t}());\r\n\texports.default = Type;\r\n\t});\r\n\r\n\tunwrapExports(type);\r\n\r\n\tvar runtime = createCommonjsModule(function (module, exports) {\r\n\t/*!\r\n\t * @Authors:\r\n\t *      jason <jasonsoop@gmail.com>\r\n\t *      Evan <skcy@vip.qq.com>\r\n\t *\r\n\t * @Date:  2019-06-25 16:05:55\r\n\t * @version: 1.0.0\r\n\t * Licensed under the MIT License.\r\n\t * Copyright (C) 2010-present UXmid Inc. All rights reserved.\r\n\t */\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\texports.Type = type.default;\r\n\t});\r\n\r\n\tunwrapExports(runtime);\r\n\tvar runtime_1 = runtime.Type;\r\n\r\n\tvar eventProvider = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * 表示一个事件项。\r\n\t * @internal\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar EventEntry = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化事件项的新实例。\r\n\t     * @param  {string} type 事件类型。\r\n\t     * @param  {Function} listener 侦听函数。\r\n\t     * @param  {any} scope 侦听函数中的 this 对象。\r\n\t     * @param  {boolean} scope 是否为仅回掉一次。\r\n\t     */\r\n\t    function EventEntry(type, listener, scope, once) {\r\n\t        this.type = type;\r\n\t        this.listener = listener;\r\n\t        this.scope = scope;\r\n\t        this.once = once;\r\n\t    }\r\n\t    return EventEntry;\r\n\t}());\r\n\t/**\r\n\t * 事件提供程序类。\r\n\t * @description 用于添加或删除事件侦听器的方法，检查是否已注册特定类型的事件侦听器，并调度事件。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar EventProvider = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化事件提供程序的新实例。\r\n\t     * @param  {any} source 事件源实例。\r\n\t     */\r\n\t    function EventProvider(source) {\r\n\t        // 保存事件源对象\r\n\t        this._source = source || this;\r\n\t        // 初始化事件字典\r\n\t        this._events = new collections.Map();\r\n\t    }\r\n\t    /**\r\n\t     * 为指定的事件类型注册一个侦听器，以使侦听器能够接收事件通知。\r\n\t     * @summary 如果不再需要某个事件侦听器，可调用 removeListener() 删除它，否则会产生内存问题。\r\n\t     * 由于垃圾回收器不会删除仍包含引用的对象，因此不会从内存中自动删除使用已注册事件侦听器的对象。\r\n\t     * @param  {string} type 事件类型。\r\n\t     * @param  {Function} 处理事件的侦听器函数。\r\n\t     * @param  {any} scope 侦听函数绑定的 this 对象。\r\n\t     * @param  {boolean} once 是否添加仅回调一次的事件侦听器，如果此参数设为 true 则在第一次回调时就自动移除监听。\r\n\t     * @returns void\r\n\t     */\r\n\t    EventProvider.prototype.addListener = function (type, listener, scope, once) {\r\n\t        if (scope === void 0) { scope = this; }\r\n\t        if (once === void 0) { once = false; }\r\n\t        if (!type || !listener) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        var entries = this._events.get(type);\r\n\t        if (!entries) {\r\n\t            entries = new Array();\r\n\t            this._events.set(type, entries);\r\n\t        }\r\n\t        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\r\n\t            var entry = entries_1[_i];\r\n\t            // 防止添加重复的侦听函数\r\n\t            if (entry.listener === listener && entry.scope === scope) {\r\n\t                return;\r\n\t            }\r\n\t        }\r\n\t        entries.push(new EventEntry(type, listener, scope, once));\r\n\t    };\r\n\t    /**\r\n\t     * 移除侦听器。如果没有注册任何匹配的侦听器，则对此方法的调用没有任何效果。 侦听函数绑定的 this 对象。\r\n\t     * @param type 事件类型。\r\n\t     * @param listener 处理事件的侦听器函数。\r\n\t     * @param scope 侦听函数绑定的 this 对象。\r\n\t     * @returns void\r\n\t     */\r\n\t    EventProvider.prototype.removeListener = function (type, listener, scope) {\r\n\t        if (scope === void 0) { scope = this; }\r\n\t        if (!type || !listener) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        var entries = this._events.get(type);\r\n\t        if (!entries) {\r\n\t            return;\r\n\t        }\r\n\t        for (var i = 0, len = entries.length; i < len; i++) {\r\n\t            var entry = entries[i];\r\n\t            if (entry.listener === listener && entry.scope === scope) {\r\n\t                entries.splice(i, 1);\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t        // 如果事件项为空，则需要释放资源\r\n\t        if (entries.length === 0) {\r\n\t            this._events.delete(type);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 检查是否为特定事件类型注册了侦听器。\r\n\t     * @param  {string} type 事件类型。\r\n\t     * @returns boolean 如果指定类型的侦听器已注册，则值为 true；否则，值为 false。\r\n\t     */\r\n\t    EventProvider.prototype.hasListener = function (type) {\r\n\t        var entries = this._events.get(type);\r\n\t        return !!entries && entries.length > 0;\r\n\t    };\r\n\t    EventProvider.prototype.dispatchEvent = function () {\r\n\t        var params = arguments, args;\r\n\t        switch (params.length) {\r\n\t            // 重载匹配: \r\n\t            // dispatchEvent(args: EventArgs): void;\r\n\t            // dispatchEvent(type: string): void;\r\n\t            case 1:\r\n\t                {\r\n\t                    if (params[0] instanceof eventArgs.default) {\r\n\t                        // 参数匹配: args: EventArgs\r\n\t                        args = params[0];\r\n\t                    }\r\n\t                    else if (runtime.Type.isString(params[0])) {\r\n\t                        // 参数匹配: type: string\r\n\t                        args = new eventArgs.default(params[0]);\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t            // 重载匹配:\r\n\t            // dispatchEvent(type: string, data: any): void;\r\n\t            case 2:\r\n\t                {\r\n\t                    // 参数匹配: type: string, data: any\r\n\t                    args = new eventArgs.default(params[0], params[1]);\r\n\t                    break;\r\n\t                }\r\n\t        }\r\n\t        // 设置事件源\r\n\t        args.source = this._source;\r\n\t        // 根据事件类型获取所有事件项\r\n\t        var entries = this._events.get(args.type);\r\n\t        if (!entries || entries.length === 0) {\r\n\t            return;\r\n\t        }\r\n\t        // 临时数组用于保存只回掉一次的事件项\r\n\t        var onces = new Array();\r\n\t        for (var _i = 0, entries_2 = entries; _i < entries_2.length; _i++) {\r\n\t            var entry = entries_2[_i];\r\n\t            entry.listener.call(entry.scope, args);\r\n\t            if (entry.once) {\r\n\t                onces.push(entry);\r\n\t            }\r\n\t        }\r\n\t        // 清除所有只回调一次的事件项\r\n\t        while (onces.length) {\r\n\t            var entry = onces.pop();\r\n\t            this.removeListener(entry.type, entry.listener, entry.scope);\r\n\t        }\r\n\t    };\r\n\t    return EventProvider;\r\n\t}());\r\n\texports.default = EventProvider;\r\n\t});\r\n\r\n\tunwrapExports(eventProvider);\r\n\r\n\tvar eventProviderFactory = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\t/**\r\n\t * 提供关于事件提供程序的功能。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar EventProviderFactory = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化事件提供程序工厂的新实例。\r\n\t     * @constructor\r\n\t     */\r\n\t    function EventProviderFactory() {\r\n\t        this._providers = new collections.Map();\r\n\t    }\r\n\t    Object.defineProperty(EventProviderFactory.prototype, \"providers\", {\r\n\t        /**\r\n\t         * 获取所有事件提供程序。\r\n\t         * @property\r\n\t         * @returns IMap<any, IEventProvider>\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._providers;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(EventProviderFactory, \"instance\", {\r\n\t        /**\r\n\t         * 获取事件提供程序工厂的单实例。\r\n\t         * @static\r\n\t         * @property\r\n\t         * @returns EventProviderFactory\r\n\t         */\r\n\t        get: function () {\r\n\t            if (!this._instance) {\r\n\t                this._instance = new EventProviderFactory();\r\n\t            }\r\n\t            return this._instance;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 获取指定事件源的事件提供程序。\r\n\t     * @param  {any} source IEventProvider 所抛出事件对象的源对象。\r\n\t     * @returns IEventProdiver 返回指定名称的事件提供程序。\r\n\t     */\r\n\t    EventProviderFactory.prototype.getProvider = function (source) {\r\n\t        if (!source) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        var provider = this._providers.get(source);\r\n\t        if (!provider) {\r\n\t            provider = this.createProvider(source);\r\n\t            this._providers.set(source, provider);\r\n\t        }\r\n\t        return provider;\r\n\t    };\r\n\t    /**\r\n\t     * 根据指定事件源创建一个事件提供程序。\r\n\t     * @virtual\r\n\t     * @param  {any} source IEventProvider 所抛出事件对象的源对象。\r\n\t     * @returns IEventProvider 事件提供程序实例。\r\n\t     */\r\n\t    EventProviderFactory.prototype.createProvider = function (source) {\r\n\t        return new eventProvider.default(source);\r\n\t    };\r\n\t    return EventProviderFactory;\r\n\t}());\r\n\texports.default = EventProviderFactory;\r\n\t});\r\n\r\n\tunwrapExports(eventProviderFactory);\r\n\r\n\tvar events = createCommonjsModule(function (module, exports) {\r\n\t/*!\r\n\t * @Authors:\r\n\t *      jason <jasonsoop@gmail.com>\r\n\t *      Evan <skcy@vip.qq.com>\r\n\t *\r\n\t * @Date:  2019-06-25 16:05:55\r\n\t * @version: 1.0.0\r\n\t * Licensed under the MIT License.\r\n\t * Copyright (C) 2010-present UXmid Inc. All rights reserved.\r\n\t */\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\texports.CancelEventArgs = cancelEventArgs.default;\r\n\r\n\texports.EventArgs = eventArgs.default;\r\n\r\n\texports.EventProvider = eventProvider.default;\r\n\r\n\texports.EventProviderFactory = eventProviderFactory.default;\r\n\t});\r\n\r\n\tunwrapExports(events);\r\n\tvar events_1 = events.CancelEventArgs;\r\n\tvar events_2 = events.EventArgs;\r\n\tvar events_3 = events.EventProvider;\r\n\tvar events_4 = events.EventProviderFactory;\r\n\r\n\tvar applicationEventArgs = createCommonjsModule(function (module, exports) {\r\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\r\n\t    var extendStatics = function (d, b) {\r\n\t        extendStatics = Object.setPrototypeOf ||\r\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t        return extendStatics(d, b);\r\n\t    };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * 应用程序事件参数类。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar ApplicationEventArgs = /** @class */ (function (_super) {\r\n\t    __extends(ApplicationEventArgs, _super);\r\n\t    /**\r\n\t     * 初始化应用程序事件参数类的新实例。\r\n\t     * @param  {string} type 事件类型。\r\n\t     * @param  {ApplicationContextBase} context 应用程序上下文实例。\r\n\t     */\r\n\t    function ApplicationEventArgs(type, context) {\r\n\t        var _this = _super.call(this, type) || this;\r\n\t        _this.context = context;\r\n\t        return _this;\r\n\t    }\r\n\t    return ApplicationEventArgs;\r\n\t}(events.EventArgs));\r\n\texports.default = ApplicationEventArgs;\r\n\t});\r\n\r\n\tunwrapExports(applicationEventArgs);\r\n\r\n\tvar charUtils = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\tvar CharUtils = /** @class */ (function () {\r\n\t    function CharUtils() {\r\n\t    }\r\n\t    /**\r\n\t     * 是否是一个单字符串。\r\n\t     * @public\r\n\t     * @param  {string} chr\r\n\t     * @returns boolean\r\n\t     */\r\n\t    CharUtils.isChar = function (char) {\r\n\t        return runtime.Type.isString(char) && char.length === 1;\r\n\t    };\r\n\t    /**\r\n\t     * 判断一个单字符串是否是一个拉丁字符，常规字符串集合。\r\n\t     * @public\r\n\t     * @param  {string} chr\r\n\t     * @returns boolean\r\n\t     */\r\n\t    CharUtils.isLatin = function (char) {\r\n\t        return char.charCodeAt(0) <= 255;\r\n\t    };\r\n\t    /**\r\n\t     * 判断一个单字符串是否是一个ASCII字符。\r\n\t     * @public\r\n\t     * @param  {string} chr\r\n\t     * @returns boolean\r\n\t     */\r\n\t    CharUtils.isAscii = function (char) {\r\n\t        return char.charCodeAt(0) <= 127;\r\n\t    };\r\n\t    /**\r\n\t     * 判断一个单字符串是否是一个数字，大写或者小写字母。\r\n\t     * @public\r\n\t     * @param  {string} chr\r\n\t     * @returns boolean\r\n\t     */\r\n\t    CharUtils.isLetterOrDigit = function (char) {\r\n\t        if (!this.isChar(char)) {\r\n\t            return false;\r\n\t        }\r\n\t        var regex = /^[0-9a-zA-Z]*$/g;\r\n\t        return regex.test(char);\r\n\t    };\r\n\t    /**\r\n\t     * 判断一个单字符串是否是一个空格。\r\n\t     * @public\r\n\t     * @param  {string} chr\r\n\t     * @returns boolean\r\n\t     */\r\n\t    CharUtils.isWhiteSpace = function (char) {\r\n\t        if (!this.isChar(char)) {\r\n\t            return false;\r\n\t        }\r\n\t        var code = char.charCodeAt(0);\r\n\t        return code === 32 || code >= 9 && code <= 13 || code === 160 || code === 133;\r\n\t    };\r\n\t    return CharUtils;\r\n\t}());\r\n\texports.default = CharUtils;\r\n\t});\r\n\r\n\tunwrapExports(charUtils);\r\n\r\n\tvar enumEntry = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t/**\r\n\t * 表示枚举项的描述。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar EnumEntry = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化枚举项的新实例。\r\n\t     * @param  {string} name 枚举项的名称。\r\n\t     * @param  {number} value 枚举项的值。\r\n\t     * @param  {string=\"\"} alias 枚举项的别名。\r\n\t     * @param  {string=\"\"} description 枚举项的描述。\r\n\t     */\r\n\t    function EnumEntry(name, value, alias, description) {\r\n\t        this.name = name;\r\n\t        this.value = value;\r\n\t        this.alias = alias || \"\";\r\n\t        this.description = description || \"\";\r\n\t    }\r\n\t    return EnumEntry;\r\n\t}());\r\n\texports.default = EnumEntry;\r\n\t});\r\n\r\n\tunwrapExports(enumEntry);\r\n\r\n\tvar enumUtils = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * 关于的枚举辅助工具类。\r\n\t * @static\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar EnumUtils = /** @class */ (function () {\r\n\t    function EnumUtils() {\r\n\t    }\r\n\t    /**\r\n\t     * 获取指定枚举项对应的描述对象。\r\n\t     * @param  {number} value 枚举值。\r\n\t     * @param  {any} type 要获取的枚举类型。\r\n\t     * @returns EnumEntry 返回的指定枚举项对应的枚举描述对象。\r\n\t     */\r\n\t    EnumUtils.getEntry = function (value, type) {\r\n\t        if (!type) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        var entries = this.getEntries(type).filter(function (e) { return e.value === value; });\r\n\t        return entries.length === 1 ? entries[0] : null;\r\n\t    };\r\n\t    /**\r\n\t     * 获取指定枚举的描述对象数据。\r\n\t     * @param  {any} type 要获取的枚举类型。\r\n\t     * @returns Array<EnumEntry> 返回的枚举描述对象数组。\r\n\t     */\r\n\t    EnumUtils.getEntries = function (type) {\r\n\t        if (!type) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        // 尝试从缓存中获取\r\n\t        if (this._entryCache.has(type)) {\r\n\t            return this._entryCache.get(type);\r\n\t        }\r\n\t        // 获取枚举的元数据\r\n\t        var metadata = runtime.Type.getMetadata(type) || {};\r\n\t        var entries = new Array(), fields = this.getFields(type);\r\n\t        for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {\r\n\t            var _a = fields_1[_i], name_1 = _a[0], value = _a[1];\r\n\t            var meta = metadata[name_1];\r\n\t            var alias = meta ? meta.alias : \"\";\r\n\t            var description = meta ? meta.description : \"\";\r\n\t            entries.push(new enumEntry.default(name_1, value, alias, description));\r\n\t        }\r\n\t        // 加入缓存以便下次获取\r\n\t        if (entries.length > 0) {\r\n\t            this._entryCache.set(type, entries);\r\n\t        }\r\n\t        return entries;\r\n\t    };\r\n\t    /**\r\n\t     * 获取指定枚举类型的字段列表\r\n\t     * @param  {any} type 枚举类型。\r\n\t     * @returns Array<[string, number]> 一个元组数据，数据项以<名称,值>的方式返回。\r\n\t     */\r\n\t    EnumUtils.getFields = function (type) {\r\n\t        if (!type) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        var fields = Object.keys(type)\r\n\t            .map(function (key) { return [key, type[key]]; })\r\n\t            .filter(function (_a) {\r\n\t            var key = _a[0], value = _a[1];\r\n\t            return runtime.Type.isNumber(value);\r\n\t        });\r\n\t        return fields;\r\n\t    };\r\n\t    EnumUtils._entryCache = new collections.Map();\r\n\t    return EnumUtils;\r\n\t}());\r\n\texports.default = EnumUtils;\r\n\t});\r\n\r\n\tunwrapExports(enumUtils);\r\n\r\n\tvar regexUtils = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t/**\r\n\t * 正则表达式常用工具类。\r\n\t * @static\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar RegexUtils = /** @class */ (function () {\r\n\t    function RegexUtils() {\r\n\t    }\r\n\t    /**\r\n\t     * 表示一个 URI 正则表达式。\r\n\t     * @static\r\n\t     * @member\r\n\t     */\r\n\t    RegexUtils.uri = /^([a-zA-Z0-9\\.]+:\\/\\/)(.+)$/;\r\n\t    /**\r\n\t     * 表示一个 Scheme 正则表达式。\r\n\t     * @static\r\n\t     * @member\r\n\t     */\r\n\t    RegexUtils.scheme = /^([a-zA-Z0-9\\.]+:\\/\\/)$/;\r\n\t    return RegexUtils;\r\n\t}());\r\n\texports.default = RegexUtils;\r\n\t});\r\n\r\n\tunwrapExports(regexUtils);\r\n\r\n\tvar stringUtils = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar chars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\r\n\tvar StringUtils = /** @class */ (function () {\r\n\t    function StringUtils() {\r\n\t    }\r\n\t    /**\r\n\t     * 去掉字符串中间特定字符并删除首尾空格，常用语路径。\r\n\t     * @public\r\n\t     * @param text\r\n\t     * @param chars\r\n\t     * @returns string\r\n\t     */\r\n\t    StringUtils.trim = function (text) {\r\n\t        var chars = [];\r\n\t        for (var _i = 1; _i < arguments.length; _i++) {\r\n\t            chars[_i - 1] = arguments[_i];\r\n\t        }\r\n\t        for (var _a = 0, chars_1 = chars; _a < chars_1.length; _a++) {\r\n\t            var char = chars_1[_a];\r\n\t            text = text.replace(new RegExp(\"^\" + char + \"+|\" + char + \"+$\", \"g\"), \"\");\r\n\t        }\r\n\t        return text.trim();\r\n\t    };\r\n\t    /**\r\n\t     * 是否手机号码\r\n\t     * @public\r\n\t     * @param text 手机号码字符串\r\n\t     * @returns string\r\n\t     */\r\n\t    StringUtils.isMobile = function (text) {\r\n\t        return /^1[34578]\\d{9}$/.test(text);\r\n\t    };\r\n\t    /**\r\n\t     * 是否密码\r\n\t     * @public\r\n\t     * @param text 密码字符串\r\n\t     * @returns string\r\n\t     */\r\n\t    StringUtils.isPassword = function (text) {\r\n\t        return text.length >= 6 && text.length <= 16;\r\n\t    };\r\n\t    /**\r\n\t     * 返回固定长度 随机大小写英文数字混合字符串\r\n\t     * @public\r\n\t     * @param count 随机数长度\r\n\t     * @returns string\r\n\t     */\r\n\t    StringUtils.generateRandom = function (count) {\r\n\t        var result = \"\";\r\n\t        for (var i = 0; i < count; i++) {\r\n\t            var id = Math.ceil(Math.random() * 35);\r\n\t            result += chars[id];\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    return StringUtils;\r\n\t}());\r\n\texports.default = StringUtils;\r\n\t});\r\n\r\n\tunwrapExports(stringUtils);\r\n\r\n\tvar common = createCommonjsModule(function (module, exports) {\r\n\t/*!\r\n\t * @Authors:\r\n\t *      jason <jasonsoop@gmail.com>\r\n\t *      Evan <skcy@vip.qq.com>\r\n\t *\r\n\t * @Date:  2019-06-25 16:05:55\r\n\t * @version: 1.0.0\r\n\t * Licensed under the MIT License.\r\n\t * Copyright (C) 2010-present UXmid Inc. All rights reserved.\r\n\t */\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\texports.CharUtils = charUtils.default;\r\n\r\n\texports.EnumEntry = enumEntry.default;\r\n\r\n\texports.EnumUtils = enumUtils.default;\r\n\r\n\texports.RegexUtils = regexUtils.default;\r\n\r\n\texports.StringUtils = stringUtils.default;\r\n\t});\r\n\r\n\tunwrapExports(common);\r\n\tvar common_1 = common.CharUtils;\r\n\tvar common_2 = common.EnumEntry;\r\n\tvar common_3 = common.EnumUtils;\r\n\tvar common_4 = common.RegexUtils;\r\n\tvar common_5 = common.StringUtils;\r\n\r\n\tvar logLevel = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * 表示一个日志的级别。\r\n\t * @enum\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar LogLevel;\r\n\t(function (LogLevel) {\r\n\t    /**\r\n\t     * 调试。\r\n\t     * @member\r\n\t     */\r\n\t    LogLevel[LogLevel[\"debug\"] = 1] = \"debug\";\r\n\t    /**\r\n\t     * 警告。\r\n\t     * @member\r\n\t     */\r\n\t    LogLevel[LogLevel[\"warn\"] = 2] = \"warn\";\r\n\t    /**\r\n\t     * 错误。\r\n\t     * @member\r\n\t     */\r\n\t    LogLevel[LogLevel[\"error\"] = 3] = \"error\";\r\n\t})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\r\n\t/*\r\n\t* 定义枚举元数据。\r\n\t*/\r\n\truntime.Type.setMetadata(LogLevel, \r\n\t// tslint:disable-next-line:align\r\n\t{\r\n\t    debug: {\r\n\t        alias: \"DEBUG\",\r\n\t        description: \"调试\"\r\n\t    },\r\n\t    warn: {\r\n\t        alias: \"WARN\",\r\n\t        description: \"警告\"\r\n\t    },\r\n\t    error: {\r\n\t        alias: \"ERROR\",\r\n\t        description: \"错误\"\r\n\t    }\r\n\t});\r\n\t});\r\n\r\n\tunwrapExports(logLevel);\r\n\tvar logLevel_1 = logLevel.LogLevel;\r\n\r\n\tvar consoleLogHandler = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\t/**\r\n\t * 表示一个基于控制台输出的日志处理程序。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar ConsoleLogHandler = /** @class */ (function () {\r\n\t    function ConsoleLogHandler() {\r\n\t    }\r\n\t    /**\r\n\t     * 处理日志项。\r\n\t     * @param  {LogEntry} entry 日志项。\r\n\t     * @returns void\r\n\t     */\r\n\t    ConsoleLogHandler.prototype.handle = function (entry) {\r\n\t        var print;\r\n\t        var level = common.EnumUtils.getEntry(entry.level, logLevel.LogLevel);\r\n\t        switch (entry.level) {\r\n\t            case logLevel.LogLevel.debug:\r\n\t                {\r\n\t                    print = console.log;\r\n\t                    break;\r\n\t                }\r\n\t            case logLevel.LogLevel.warn:\r\n\t                {\r\n\t                    print = console.warn;\r\n\t                    break;\r\n\t                }\r\n\t            case logLevel.LogLevel.error:\r\n\t                {\r\n\t                    print = console.error;\r\n\t                    break;\r\n\t                }\r\n\t        }\r\n\t        print(\"[--------[\" + level.alias + \"] \" + entry.timestamp.toLocaleString() + \"--------\");\r\n\t        print(entry.message);\r\n\t        if (entry.data) {\r\n\t            print(entry.data);\r\n\t        }\r\n\t        print(entry.source);\r\n\t        print(\"----------------------------------------------]\");\r\n\t    };\r\n\t    return ConsoleLogHandler;\r\n\t}());\r\n\texports.default = ConsoleLogHandler;\r\n\t});\r\n\r\n\tunwrapExports(consoleLogHandler);\r\n\r\n\tvar logEntry = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t/**\r\n\t * 表示一个日志项。\r\n\t * @interface\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar LogEntry = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化日志项的新实例。\r\n\t     * @param  {LogLevel} level 日志级别。\r\n\t     * @param  {any} source 日志来源。\r\n\t     * @param  {string} message 消息。\r\n\t     * @param  {any} data 附带数据。\r\n\t     */\r\n\t    function LogEntry(level, source, message, data) {\r\n\t        this._level = level;\r\n\t        this._source = source;\r\n\t        this._message = message;\r\n\t        this._data = data;\r\n\t        this._timestamp = new Date();\r\n\t    }\r\n\t    Object.defineProperty(LogEntry.prototype, \"level\", {\r\n\t        /**\r\n\t         * 获取日志级别。\r\n\t         * @member\r\n\t         * @returns LogLevel\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._level;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(LogEntry.prototype, \"source\", {\r\n\t        /**\r\n\t         * 获取日志来源。\r\n\t         * @member\r\n\t         * @returns any\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._source;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(LogEntry.prototype, \"message\", {\r\n\t        /**\r\n\t         * 获取或设置消息。\r\n\t         * @member\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._message;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(LogEntry.prototype, \"data\", {\r\n\t        /**\r\n\t         * 获取或设置数据。\r\n\t         * @member\r\n\t         * @returns any\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._data;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(LogEntry.prototype, \"timestamp\", {\r\n\t        /**\r\n\t         * 获取或设置时间。\r\n\t         * @member\r\n\t         * @returns Date\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._timestamp;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    return LogEntry;\r\n\t}());\r\n\texports.default = LogEntry;\r\n\t});\r\n\r\n\tunwrapExports(logEntry);\r\n\r\n\tvar logger = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\t/**\r\n\t * 提供日志记录的功能。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar Logger = /** @class */ (function () {\r\n\t    function Logger() {\r\n\t    }\r\n\t    Object.defineProperty(Logger, \"handlers\", {\r\n\t        /**\r\n\t         * 获取所有日志处理程序。\r\n\t         * @static\r\n\t         * @returns ISet\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._handlers;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 记录一个调试日志。\r\n\t     * @static\r\n\t     * @param  {any} source 日志来源。\r\n\t     * @param  {string} message 日志消息。\r\n\t     * @param  {any} data 附带数据。\r\n\t     * @returns void\r\n\t     */\r\n\t    Logger.debug = function (source, message, data) {\r\n\t        this.write(logLevel.LogLevel.debug, source, message, data);\r\n\t    };\r\n\t    /**\r\n\t     * 记录一个警告日志。\r\n\t     * @static\r\n\t     * @param  {any} source 日志来源。\r\n\t     * @param  {string} message 日志消息。\r\n\t     * @param  {any} data 附带数据。\r\n\t     * @returns void\r\n\t     */\r\n\t    Logger.warn = function (source, message, data) {\r\n\t        this.write(logLevel.LogLevel.warn, source, message, data);\r\n\t    };\r\n\t    /**\r\n\t     * 记录一个错误日志。\r\n\t     * @static\r\n\t     * @param  {any} source 日志来源。\r\n\t     * @param  {string} message 日志消息。\r\n\t     * @param  {any} data 附带数据。\r\n\t     * @returns void\r\n\t     */\r\n\t    Logger.error = function (source, message, data) {\r\n\t        this.write(logLevel.LogLevel.error, source, message, data);\r\n\t    };\r\n\t    /**\r\n\t     * 写入日志。\r\n\t     * @static\r\n\t     * @param  {LogLevel} level 日志级别。\r\n\t     * @param  {any} source 日志来源。\r\n\t     * @param  {string} message 日志消息。\r\n\t     * @param  {any} data 附带数据。\r\n\t     * @returns void\r\n\t     */\r\n\t    Logger.write = function (level, source, message, data) {\r\n\t        var entry = new logEntry.default(level, source, message, data);\r\n\t        this._handlers.forEach(function (handler) {\r\n\t            handler.handle(entry);\r\n\t        });\r\n\t    };\r\n\t    Logger._handlers = new collections.Set();\r\n\t    return Logger;\r\n\t}());\r\n\texports.default = Logger;\r\n\t});\r\n\r\n\tunwrapExports(logger);\r\n\r\n\tvar diagnostics = createCommonjsModule(function (module, exports) {\r\n\t/*!\r\n\t * @Authors:\r\n\t *      jason <jasonsoop@gmail.com>\r\n\t *      Evan <skcy@vip.qq.com>\r\n\t *\r\n\t * @Date:  2019-06-25 16:05:55\r\n\t * @version: 1.0.0\r\n\t * Licensed under the MIT License.\r\n\t * Copyright (C) 2010-present UXmid Inc. All rights reserved.\r\n\t */\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\texports.ConsoleLogHandler = consoleLogHandler.default;\r\n\r\n\texports.LogEntry = logEntry.default;\r\n\r\n\texports.Logger = logger.default;\r\n\r\n\texports.LogLevel = logLevel.LogLevel;\r\n\t});\r\n\r\n\tunwrapExports(diagnostics);\r\n\tvar diagnostics_1 = diagnostics.ConsoleLogHandler;\r\n\tvar diagnostics_2 = diagnostics.LogEntry;\r\n\tvar diagnostics_3 = diagnostics.Logger;\r\n\tvar diagnostics_4 = diagnostics.LogLevel;\r\n\r\n\tvar application = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * 应用程序类，负责整个应用的启动和退出。\r\n\t * @static\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar Application = /** @class */ (function () {\r\n\t    function Application() {\r\n\t    }\r\n\t    Object.defineProperty(Application, \"eventProvider\", {\r\n\t        /**\r\n\t         * 获取一个事件提供程序实例。\r\n\t         * @private\r\n\t         * @property\r\n\t         * @returns IEventProvider\r\n\t         */\r\n\t        get: function () {\r\n\t            if (!this._eventProvider) {\r\n\t                this._eventProvider = new events.EventProvider(this);\r\n\t            }\r\n\t            return this._eventProvider;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(Application, \"isStarted\", {\r\n\t        /**\r\n\t         * 获取一个布尔值，表示当前应用是否启动完成。\r\n\t         * @static\r\n\t         * @property\r\n\t         * @returns boolean\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._isStarted;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(Application, \"context\", {\r\n\t        /**\r\n\t         * 获取应用程序上下文实例。\r\n\t         * @static\r\n\t         * @property\r\n\t         * @returns ApplicationContextBase\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._context;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 启动应用程序。\r\n\t     * @static\r\n\t     * @param  {ApplicationContextBase} context 应用程序上下文实例。\r\n\t     * @param  {Array<string>} args 启动参数。\r\n\t     * @returns void\r\n\t     */\r\n\t    Application.start = function (context, args) {\r\n\t        var _this = this;\r\n\t        if (!context) {\r\n\t            throw new exceptions.ArgumentException(\"context\");\r\n\t        }\r\n\t        if (this._isStarted) {\r\n\t            return;\r\n\t        }\r\n\t        // 激发 \"starting\" 事件\r\n\t        this.dispatchEvent(new applicationEventArgs.default(this.STARTING, context));\r\n\t        try {\r\n\t            // 保存应用程序上下文\r\n\t            this._context = context;\r\n\t            // 将应用上下文对象注册到默认服务容器中\r\n\t            context.serviceFactory.default.register(\"applicationContext\", context);\r\n\t            // 初始化全局模块\r\n\t            this.initializeGlobalModules(context);\r\n\t            // 获取工作台对象\r\n\t            var workbench = context.getWorkbench(args);\r\n\t            // 如果工作台对象不为空则运行工作台\r\n\t            if (workbench) {\r\n\t                // 挂载工作台打开事件\r\n\t                workbench.addListener(workbench.OPENED, function (e) {\r\n\t                    // 标识应用程序启动完成\r\n\t                    _this._isStarted = true;\r\n\t                    // 激发 \"started\" 事件\r\n\t                    _this.dispatchEvent(new applicationEventArgs.default(_this.STARTED, context));\r\n\t                });\r\n\t                // 挂载工作台关闭事件\r\n\t                workbench.addListener(workbench.CLOSED, function (e) {\r\n\t                    _this.exit();\r\n\t                });\r\n\t                // 启动工作台\r\n\t                workbench.open(args);\r\n\t            }\r\n\t        }\r\n\t        catch (ex) {\r\n\t            // 应用无法启动，写入日志\r\n\t            diagnostics.Logger.error(this, ex);\r\n\t            // 重抛异常\r\n\t            throw ex;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 关闭当前应用程序。\r\n\t     * @static\r\n\t     * @returns void\r\n\t     */\r\n\t    Application.exit = function () {\r\n\t        var context = this._context;\r\n\t        // 如果上下文对象为空，则表示尚未启动\r\n\t        if (!context) {\r\n\t            return;\r\n\t        }\r\n\t        // 重置启动标记\r\n\t        this._isStarted = false;\r\n\t        // 创建取消事件参数\r\n\t        var args = new events.CancelEventArgs(this.EXITING, this);\r\n\t        // 激发 \"exiting\" 事件\r\n\t        this.dispatchEvent(args);\r\n\t        // 判断是否取消退出，如果是则退出\r\n\t        if (args.cancel) {\r\n\t            return;\r\n\t        }\r\n\t        // 关闭工作台\r\n\t        if (context.workbench) {\r\n\t            context.workbench.close();\r\n\t        }\r\n\t        // 卸载全局模块\r\n\t        this.disposeGlobalModules(context);\r\n\t        // 释放应用程序上下文\r\n\t        this._context = null;\r\n\t    };\r\n\t    /**\r\n\t     * 为指定的事件类型注册一个侦听器，以使侦听器能够接收事件通知。\r\n\t     * @summary 如果不再需要某个事件侦听器，可调用 removeListener() 删除它，否则会产生内存问题。\r\n\t     * 由于垃圾回收器不会删除仍包含引用的对象，因此不会从内存中自动删除使用已注册事件侦听器的对象。\r\n\t     * @param type 事件类型。\r\n\t     * @param listener 处理事件的侦听器函数。\r\n\t     * @param scope 侦听函数绑定的 this 对象。\r\n\t     * @param once 是否添加仅回调一次的事件侦听器，如果此参数设为 true 则在第一次回调时就自动移除监听。\r\n\t     * @returns void\r\n\t     */\r\n\t    Application.addListener = function (type, listener, scope, once) {\r\n\t        this.eventProvider.addListener(type, listener, scope, once);\r\n\t    };\r\n\t    /**\r\n\t     * 移除侦听器。如果没有注册任何匹配的侦听器，则对此方法的调用没有任何效果。\r\n\t     * @param type 事件类型。\r\n\t     * @param listener 处理事件的侦听器函数。\r\n\t     * @param scope 侦听函数绑定的 this 对象。\r\n\t     * @returns void\r\n\t     */\r\n\t    Application.removeListener = function (type, listener, scope) {\r\n\t        this.eventProvider.removeListener(type, listener, scope);\r\n\t    };\r\n\t    /**\r\n\t     * 派发一个指定参数的事件。\r\n\t     * @param eventArgs 事件参数实例。\r\n\t     * @returns void\r\n\t     */\r\n\t    Application.dispatchEvent = function (args) {\r\n\t        this.eventProvider.dispatchEvent(args);\r\n\t    };\r\n\t    /**\r\n\t     * 初始化全局模块。\r\n\t     * @private\r\n\t     * @param context 应用上下文\r\n\t     * @returns void\r\n\t     */\r\n\t    Application.initializeGlobalModules = function (context) {\r\n\t        context.modules.forEach(function (module) {\r\n\t            if (module) {\r\n\t                module.initialize(context);\r\n\t            }\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 卸载全局模块。\r\n\t     * @private\r\n\t     * @param context 应用上下文\r\n\t     * @returns void\r\n\t     */\r\n\t    Application.disposeGlobalModules = function (context) {\r\n\t        context.modules.forEach(function (module) {\r\n\t            if (module) {\r\n\t                module.dispose();\r\n\t            }\r\n\t        });\r\n\t    };\r\n\t    Application._isStarted = false; // 标识应用程序是否启动完成\r\n\t    Application._context = null; // 应用程序上下文实例\r\n\t    /**\r\n\t     * 当应用程序启动时产生的事件。\r\n\t     * @event ApplicationEventArgs\r\n\t     */\r\n\t    Application.STARTING = \"starting\";\r\n\t    /**\r\n\t     * 当应用程序启动后产生的事件。\r\n\t     * @event ApplicationEventArgs\r\n\t     */\r\n\t    Application.STARTED = \"started\";\r\n\t    /**\r\n\t     * 当应用程序即将退出时产生的事件。\r\n\t     * @event CancelEventArgs\r\n\t     */\r\n\t    Application.EXITING = \"exiting\";\r\n\t    return Application;\r\n\t}());\r\n\texports.default = Application;\r\n\t});\r\n\r\n\tunwrapExports(application);\r\n\r\n\tvar localStorage = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\t/**\r\n\t * 表示全局本地缓存容器。\r\n\t * @static\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar LocalStorage = /** @class */ (function () {\r\n\t    /**\r\n\t     * 私有构造方法。\r\n\t     * @private\r\n\t     */\r\n\t    function LocalStorage() {\r\n\t    }\r\n\t    Object.defineProperty(LocalStorage, \"proxy\", {\r\n\t        /**\r\n\t         * 获取或设置缓存代理。\r\n\t         * @returns any\r\n\t         */\r\n\t        get: function () {\r\n\t            if (!this._proxy && window && window.localStorage) {\r\n\t                return window.localStorage;\r\n\t            }\r\n\t            return this._proxy;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._proxy = value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(LocalStorage, \"size\", {\r\n\t        /**\r\n\t         * 获取本地缓存容器的存储数量。\r\n\t         * @static\r\n\t         * @property\r\n\t         * @returns number\r\n\t         */\r\n\t        get: function () {\r\n\t            return this.proxy.length;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 将指定的键值对加入缓存中。\r\n\t     * @static\r\n\t     * @param  {string} key 缓存键。\r\n\t     * @param  {any} obj 缓存值。\r\n\t     * @returns void\r\n\t     */\r\n\t    LocalStorage.set = function (key, value) {\r\n\t        if (!key) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        var serialized = this.serialize(value);\r\n\t        this.proxy.setItem(key, serialized);\r\n\t    };\r\n\t    /**\r\n\t     * 从缓存中获取指定键名的值。\r\n\t     * @static\r\n\t     * @param  {string} key 缓存键。\r\n\t     * @returns T\r\n\t     */\r\n\t    LocalStorage.get = function (key) {\r\n\t        return this.deserialize(this.proxy.getItem(key));\r\n\t    };\r\n\t    /**\r\n\t     * 从缓存中移除指定键名的值。\r\n\t     * @static\r\n\t     * @param  {string} key 缓存键。\r\n\t     * @returns void\r\n\t     */\r\n\t    LocalStorage.remove = function (key) {\r\n\t        if (!key) {\r\n\t            throw new exceptions.ArgumentException(key);\r\n\t        }\r\n\t        this.proxy.removeItem(key);\r\n\t    };\r\n\t    /**\r\n\t     * 清空缓存容器中所有缓存。\r\n\t     * @static\r\n\t     * @returns void\r\n\t     */\r\n\t    LocalStorage.clear = function () {\r\n\t        this.proxy.clear();\r\n\t    };\r\n\t    /**\r\n\t     * 将指定的字符串序列化为一个字符串。\r\n\t     * @private\r\n\t     * @static\r\n\t     * @param  {any} obj 待序列化的对象。\r\n\t     * @returns string 序列化的字符串。\r\n\t     */\r\n\t    LocalStorage.serialize = function (obj) {\r\n\t        return runtime.Type.isUndefined(obj) || runtime.Type.isFunction(obj) ? obj + \"\" : JSON.stringify(obj);\r\n\t    };\r\n\t    /**\r\n\t     * 将指定的字符串反序列化为一个对象。\r\n\t     * @private\r\n\t     * @static\r\n\t     * @param  {string} str 待反序列化的字符串。\r\n\t     * @returns any 反序列化后的实例，如果反序列化失败则返回 undefined。\r\n\t     */\r\n\t    LocalStorage.deserialize = function (str) {\r\n\t        try {\r\n\t            return JSON.parse(str);\r\n\t        }\r\n\t        catch (ex) {\r\n\t            return str || undefined;\r\n\t        }\r\n\t    };\r\n\t    return LocalStorage;\r\n\t}());\r\n\texports.default = LocalStorage;\r\n\t});\r\n\r\n\tunwrapExports(localStorage);\r\n\r\n\tvar stringReader = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * 实现从字符串进行读取的读取器。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar StringReader = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化从指定字符串进行读取的 StringReader 类的新实例。\r\n\t     * @constructor\r\n\t     * @param  {string} text\r\n\t     */\r\n\t    function StringReader(text) {\r\n\t        if (!text) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        this._text = text;\r\n\t        this._position = 0;\r\n\t        this._length = text.length;\r\n\t    }\r\n\t    /**\r\n\t     * 返回下一个可用的字符，但不使用它。\r\n\t     * @returns number 表示下一个要读取的字符的整数，或者，如果没有更多的可用字符或该流不支持查找，则为 -1。\r\n\t     */\r\n\t    StringReader.prototype.peek = function () {\r\n\t        if (this._position === this._length) {\r\n\t            return -1;\r\n\t        }\r\n\t        return this._text.charCodeAt(this._position);\r\n\t    };\r\n\t    /**\r\n\t     * 读取输入字符串中的下一个字符并将该字符的位置提升一个字符。\r\n\t     * @returns number 基础字符串中的下一个字符，或者如果没有更多的可用字符，则为 -1。\r\n\t     */\r\n\t    StringReader.prototype.read = function () {\r\n\t        if (this._position === this._length) {\r\n\t            return -1;\r\n\t        }\r\n\t        var pos = this._position;\r\n\t        this._position++;\r\n\t        return this._text.charCodeAt(pos);\r\n\t    };\r\n\t    /**\r\n\t     * 将整个流或从流的当前位置到流的结尾作为字符串读取。\r\n\t     * @returns string 从当前位置到基础字符串的结尾之间的内容。\r\n\t     */\r\n\t    StringReader.prototype.readToEnd = function () {\r\n\t        var str = this._position !== 0 ? this._text.substring(this._position, this._length) : this._text;\r\n\t        this._position = this._length;\r\n\t        return str;\r\n\t    };\r\n\t    /**\r\n\t     * 从基础字符串中读取一行。\r\n\t     * @returns string 基础字符串中的下一行；或者如果到达了基础字符串的末尾，则为 null。\r\n\t     */\r\n\t    StringReader.prototype.readLine = function () {\r\n\t        var text = this._text, pos;\r\n\t        for (pos = this._position; pos < this._length; ++pos) {\r\n\t            var code = text.charCodeAt(pos);\r\n\t            var char = String.fromCharCode(code);\r\n\t            switch (char) {\r\n\t                case \"\\r\":\r\n\t                case \"\\n\":\r\n\t                    {\r\n\t                        var str = text.substring(this._position, pos);\r\n\t                        this._position = pos + 1;\r\n\t                        // tslint:disable-next-line:no-magic-numbers\r\n\t                        if (code === 13 && this._position < this._length && text.charCodeAt(this._position) === 10) {\r\n\t                            this._position++;\r\n\t                        }\r\n\t                        return str;\r\n\t                    }\r\n\t                default:\r\n\t                    {\r\n\t                        continue;\r\n\t                    }\r\n\t            }\r\n\t        }\r\n\t        if (pos <= this._position) {\r\n\t            return null;\r\n\t        }\r\n\t        var str1 = text.substring(this._position, pos);\r\n\t        this._position = pos;\r\n\t        return str1;\r\n\t    };\r\n\t    /**\r\n\t     * 执行与释放或重置非托管资源关联的应用程序定义的任务。\r\n\t     * @returns void\r\n\t     */\r\n\t    StringReader.prototype.dispose = function () {\r\n\t        this._text = null;\r\n\t        this._position = 0;\r\n\t        this._length = 0;\r\n\t    };\r\n\t    return StringReader;\r\n\t}());\r\n\texports.default = StringReader;\r\n\t});\r\n\r\n\tunwrapExports(stringReader);\r\n\r\n\tvar pathAnchor = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t/**\r\n\t * 表示关于路径的锚定点。\r\n\t * @enum\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar PathAnchor;\r\n\t(function (PathAnchor) {\r\n\t    /**\r\n\t     * 未锚定。\r\n\t     * @member\r\n\t     */\r\n\t    PathAnchor[PathAnchor[\"none\"] = 0] = \"none\";\r\n\t    /**\r\n\t     * 基于当前位置。\r\n\t     * @member\r\n\t     */\r\n\t    PathAnchor[PathAnchor[\"current\"] = 1] = \"current\";\r\n\t    /**\r\n\t     * 基于上级节点。\r\n\t     * @member\r\n\t     */\r\n\t    PathAnchor[PathAnchor[\"parent\"] = 2] = \"parent\";\r\n\t    /**\r\n\t     * 从根节点开始。\r\n\t     * @member\r\n\t     */\r\n\t    PathAnchor[PathAnchor[\"root\"] = 3] = \"root\";\r\n\t})(PathAnchor = exports.PathAnchor || (exports.PathAnchor = {}));\r\n\t});\r\n\r\n\tunwrapExports(pathAnchor);\r\n\tvar pathAnchor_1 = pathAnchor.PathAnchor;\r\n\r\n\tvar io = createCommonjsModule(function (module, exports) {\r\n\t/*!\r\n\t * @Authors:\r\n\t *      jason <jasonsoop@gmail.com>\r\n\t *      Evan <skcy@vip.qq.com>\r\n\t *\r\n\t * @Date:  2019-06-25 16:05:55\r\n\t * @version: 1.0.0\r\n\t * Licensed under the MIT License.\r\n\t * Copyright (C) 2010-present UXmid Inc. All rights reserved.\r\n\t */\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\texports.LocalStorage = localStorage.default;\r\n\r\n\texports.StringReader = stringReader.default;\r\n\r\n\texports.PathAnchor = pathAnchor.PathAnchor;\r\n\t});\r\n\r\n\tunwrapExports(io);\r\n\tvar io_1 = io.LocalStorage;\r\n\tvar io_2 = io.StringReader;\r\n\tvar io_3 = io.PathAnchor;\r\n\r\n\tvar activator = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\t/**\r\n\t * 提供对象实例创建的方法。\r\n\t * @static\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar Activator = /** @class */ (function () {\r\n\t    /**\r\n\t     * 私有构造方法，使类型成为静态类。\r\n\t     * @private\r\n\t     */\r\n\t    function Activator() {\r\n\t    }\r\n\t    /**\r\n\t     * 创建指定类型的实例。\r\n\t     * @param type 类型字符串或类型构造函数。\r\n\t     * @param params 需要传递给构造函数的参数。\r\n\t     * @returns T\r\n\t     */\r\n\t    Activator.createInstance = function (type) {\r\n\t        var params = [];\r\n\t        for (var _i = 1; _i < arguments.length; _i++) {\r\n\t            params[_i - 1] = arguments[_i];\r\n\t        }\r\n\t        var types = this._types, ctor;\r\n\t        if (runtime.Type.isString(type)) {\r\n\t            type = type;\r\n\t            // 先从缓存中获取类型，如果不存在则动态解析并加入缓存\r\n\t            if (!types.has(type)) {\r\n\t                ctor = runtime.Type.getClassType(type);\r\n\t                if (ctor === String) {\r\n\t                    throw new TypeError(\"Can not found the type \\\"\" + type + \"\\\".\");\r\n\t                }\r\n\t                // 只有解析到的类型不是字符串，而是真实的类型时才往下走\r\n\t                types.set(type, ctor);\r\n\t            }\r\n\t            else {\r\n\t                ctor = types.get(type);\r\n\t            }\r\n\t        }\r\n\t        else if (runtime.Type.isFunction(type)) {\r\n\t            ctor = type;\r\n\t        }\r\n\t        return new (ctor.bind.apply(ctor, [void 0].concat(params)))();\r\n\t    };\r\n\t    Activator._types = new collections.Map();\r\n\t    return Activator;\r\n\t}());\r\n\texports.default = Activator;\r\n\t});\r\n\r\n\tunwrapExports(activator);\r\n\r\n\tvar reflection = createCommonjsModule(function (module, exports) {\r\n\t/*!\r\n\t * @Authors:\r\n\t *      jason <jasonsoop@gmail.com>\r\n\t *      Evan <skcy@vip.qq.com>\r\n\t *\r\n\t * @Date:  2019-06-25 16:05:55\r\n\t * @version: 1.0.0\r\n\t * Licensed under the MIT License.\r\n\t * Copyright (C) 2010-present UXmid Inc. All rights reserved.\r\n\t */\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\texports.Activator = activator.default;\r\n\t});\r\n\r\n\tunwrapExports(reflection);\r\n\tvar reflection_1 = reflection.Activator;\r\n\r\n\tvar serviceEntry = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\t/**\r\n\t * 表示一个用于存取服务使用的服务项。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar ServiceEntry = /** @class */ (function () {\r\n\t    function ServiceEntry() {\r\n\t        this._name = null; // 服务名称\r\n\t        this._service = null; // 服务实例\r\n\t        this._serviceType = null; // 服务类型\r\n\t        this._contractTypes = null; // 服务所持有的契约类型\r\n\t        this._serviceBuilder = null; // 服务生成器\r\n\t        var args = arguments;\r\n\t        switch (args.length) {\r\n\t            // 签名匹配: \r\n\t            // constructor(serviceType: Function, contractTypes?: Array<Function>);\r\n\t            // constructor(service: any, contractTypes?: Array<Function>);\r\n\t            case 1:\r\n\t            // tslint:disable-next-line:no-magic-numbers\r\n\t            case 2:\r\n\t                {\r\n\t                    // 参数匹配: serviceType: Function\r\n\t                    if (runtime.Type.isFunction(args[0])) {\r\n\t                        this._serviceType = args[0];\r\n\t                    }\r\n\t                    // 参数匹配: service: any\r\n\t                    else {\r\n\t                        this._service = args[0];\r\n\t                        this._serviceType = runtime.Type.getClassType(args[0]);\r\n\t                    }\r\n\t                    // 参数匹配: contractTypes?: Array<Function>\r\n\t                    this._contractTypes = args[1] || null;\r\n\t                    break;\r\n\t                }\r\n\t            // 签名匹配: \r\n\t            // constructor(name: string, serviceType: Function, contractTypes?: Array<Function>);\r\n\t            // constructor(name: string, service: any, contractTypes?: Array<Function>);\r\n\t            // tslint:disable-next-line:no-magic-numbers\r\n\t            case 3:\r\n\t                {\r\n\t                    // 参数匹配: name: string\r\n\t                    this._name = args[0];\r\n\t                    // 参数匹配: serviceType: Function\r\n\t                    if (runtime.Type.isFunction(args[1])) {\r\n\t                        this._serviceType = args[1];\r\n\t                    }\r\n\t                    // 参数匹配: service: any\r\n\t                    else {\r\n\t                        this._service = args[1];\r\n\t                        this._serviceType = runtime.Type.getClassType(args[1]);\r\n\t                    }\r\n\t                    // 参数匹配: contractTypes?: Array<Function>\r\n\t                    // tslint:disable-next-line:no-magic-numbers\r\n\t                    this._contractTypes = args[2] || null;\r\n\t                    break;\r\n\t                }\r\n\t        }\r\n\t    }\r\n\t    Object.defineProperty(ServiceEntry.prototype, \"name\", {\r\n\t        /**\r\n\t         * 获取服务的名称。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._name;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(ServiceEntry.prototype, \"serviceType\", {\r\n\t        /**\r\n\t         * 获取服务的类型。\r\n\t         * @property\r\n\t         * @returns Function\r\n\t         */\r\n\t        get: function () {\r\n\t            if (!this._serviceType) {\r\n\t                var instance = this._service;\r\n\t                if (instance) {\r\n\t                    this._serviceType = runtime.Type.getClassType(instance);\r\n\t                }\r\n\t            }\r\n\t            return this._serviceType;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(ServiceEntry.prototype, \"service\", {\r\n\t        /**\r\n\t         * 获取服务实例。\r\n\t         * @property\r\n\t         * @returns any\r\n\t         */\r\n\t        get: function () {\r\n\t            if (!this._service) {\r\n\t                // 创建一个新的服务实例\r\n\t                this._service = this.createService();\r\n\t            }\r\n\t            return this._service;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(ServiceEntry.prototype, \"hasService\", {\r\n\t        /**\r\n\t         * 获取一个布尔值，表示当前服务项是否包含服务实例。\r\n\t         * @property\r\n\t         * @returns boolean\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._service ? true : false;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(ServiceEntry.prototype, \"hasContracts\", {\r\n\t        /**\r\n\t         * 获取一个布尔值，表示当前服务项是否包含契约类型。\r\n\t         * @property\r\n\t         * @returns boolean\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._contractTypes && this._contractTypes.length > 0;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(ServiceEntry.prototype, \"contractTypes\", {\r\n\t        /**\r\n\t         * 获取当前服务项包含的所有契约类型。\r\n\t         * @property\r\n\t         * @returns Function\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._contractTypes;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(ServiceEntry.prototype, \"serviceBuilder\", {\r\n\t        /**\r\n\t         * 获取或设置服务生成器。\r\n\t         * @property\r\n\t         * @param  {IServiceBuilder} value\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._serviceBuilder;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._serviceBuilder = value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 返回服务项的字符串表现形式。\r\n\t     * @override\r\n\t     * @returns string\r\n\t     */\r\n\t    ServiceEntry.prototype.toString = function () {\r\n\t        var typeName = runtime.Type.getQualifiedClassName(this.serviceType);\r\n\t        if (runtime.Type.isEmptyString(this.name)) {\r\n\t            return typeName;\r\n\t        }\r\n\t        else {\r\n\t            return this.name + \" (\" + typeName + \")\";\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 创建服务实例。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @returns any\r\n\t     */\r\n\t    ServiceEntry.prototype.createService = function () {\r\n\t        var builder = this._serviceBuilder;\r\n\t        if (builder) {\r\n\t            // 如果服务生成器，则交由服务生成器生成实例\r\n\t            var instance = builder.build(this);\r\n\t            if (instance) {\r\n\t                this._serviceType = runtime.Type.getClassType(instance);\r\n\t            }\r\n\t            return instance;\r\n\t        }\r\n\t        var type = this._serviceType;\r\n\t        if (type) {\r\n\t            // 否则由默认的实例生成函数生成实例\r\n\t            return reflection.Activator.createInstance(type);\r\n\t        }\r\n\t        return null;\r\n\t    };\r\n\t    return ServiceEntry;\r\n\t}());\r\n\texports.default = ServiceEntry;\r\n\t});\r\n\r\n\tunwrapExports(serviceEntry);\r\n\r\n\tvar serviceStorageBase = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * 服务仓储基类。\r\n\t * @abstract\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar ServiceStorageBase = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化服务仓储的新实例。\r\n\t     * @param  {IServiceProvider} provider\r\n\t     */\r\n\t    function ServiceStorageBase(provider) {\r\n\t        if (!provider) {\r\n\t            throw new exceptions.ArgumentException(\"provider\");\r\n\t        }\r\n\t        this._provider = provider;\r\n\t    }\r\n\t    Object.defineProperty(ServiceStorageBase.prototype, \"provider\", {\r\n\t        /**\r\n\t         * 获取一个服务提供程序实例。\r\n\t         * @property\r\n\t         * @returns IServiceProvider\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._provider;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    ServiceStorageBase.prototype.add = function () {\r\n\t        var args = arguments, entry;\r\n\t        switch (args.length) {\r\n\t            // 重载匹配: \r\n\t            // add(entry: ServiceEntry): void;\r\n\t            // add(serviceType: Function): ServiceEntry;\r\n\t            // add(service: any): ServiceEntry;\r\n\t            case 1:\r\n\t                {\r\n\t                    if (args[0] instanceof serviceEntry.default) {\r\n\t                        // 参数匹配: entry: ServiceEntry\r\n\t                        entry = args[0];\r\n\t                    }\r\n\t                    else {\r\n\t                        // 参数匹配: serviceType: Function,\r\n\t                        // 参数匹配: service: any\r\n\t                        entry = new serviceEntry.default(args[0], null);\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t            // 重载匹配: \r\n\t            // add(serviceType: Function, contractTypes?: Array<Function>): ServiceEntry;\r\n\t            // add(service: any, contractTypes?: Array<Function>): ServiceEntry;\r\n\t            // add(name: string, serviceType: Function): ServiceEntry;\r\n\t            // add(name: string, service: any): ServiceEntry;\r\n\t            // tslint:disable-next-line:no-magic-numbers\r\n\t            case 2:\r\n\t                {\r\n\t                    if (!runtime.Type.isString(args[0])) {\r\n\t                        // 参数匹配: serviceType: Function, contractTypes?: Array<Function>\r\n\t                        // 参数匹配: service: any, contractTypes?: Array<Function>\r\n\t                        entry = new serviceEntry.default(args[0], args[1]);\r\n\t                    }\r\n\t                    else {\r\n\t                        // 参数匹配: name: string, serviceType: Function\r\n\t                        // 参数匹配: name: string, service: any\r\n\t                        entry = new serviceEntry.default(args[0], args[1], null);\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t            // 重载匹配: \r\n\t            // add(name: string, serviceType: Function, contractTypes?: Array<Function>): ServiceEntry;\r\n\t            // add(name: string, service: any, contractTypes?: Array<Function>): ServiceEntry;\r\n\t            // tslint:disable-next-line:no-magic-numbers\r\n\t            case 3:\r\n\t                {\r\n\t                    // 参数匹配: name: string, serviceType: Function, contractTypes?: Array<Function>\r\n\t                    // 参数匹配: name: string, service: any, contractTypes?: Array<Function>\r\n\t                    // tslint:disable-next-line:no-magic-numbers\r\n\t                    entry = new serviceEntry.default(args[0], args[1], args[2]);\r\n\t                    break;\r\n\t                }\r\n\t        }\r\n\t        if (!entry) {\r\n\t            throw new exceptions.ArgumentException(\"Can not add service, please check the arguments.\");\r\n\t        }\r\n\t        // 调用抽象方法添加至容器中\r\n\t        this.insert(entry);\r\n\t        return entry;\r\n\t    };\r\n\t    ServiceStorageBase.prototype.get = function () {\r\n\t        var args = arguments, result = null;\r\n\t        // 重载匹配: get(name: string): ServiceEntry;\r\n\t        if (runtime.Type.isString(args[0])) {\r\n\t            // 从当前容器及其外链容器中查找指定名称的服务\r\n\t            result = this.findByName(args[0], new collections.Set(this));\r\n\t            // 如果上面的查找失败，则尝试从默认服务容器及其外链容器中查找指定名称的服务\r\n\t            var defaultProvider = serviceProviderFactory.default.instance.default;\r\n\t            if (!result && defaultProvider && defaultProvider.storage !== this) {\r\n\t                result = this.findByName(args[0], new collections.Set(defaultProvider.storage));\r\n\t            }\r\n\t            // 如果根据名称还没找到，则根据类型进行匹配\r\n\t            if (!result) {\r\n\t                // 根据指定类型查找\r\n\t                // tslint:disable-next-line:whitespace\r\n\t                result = this.findByType(args[0], false);\r\n\t            }\r\n\t        }\r\n\t        // 重载匹配: get(serviceType: Function): ServiceEntry;\r\n\t        else {\r\n\t            // 根据指定类型查找\r\n\t            result = this.findByType(args[0], false);\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    /**\r\n\t     * 获取指定服务类型的所有服务项实例。\r\n\t     * @param  {Function} serviceType 服务类型。\r\n\t     * @returns IEnumerable<ServiceEntry> 服务项列表。\r\n\t     */\r\n\t    ServiceStorageBase.prototype.getAll = function (serviceType) {\r\n\t        return this.findByType(serviceType, true);\r\n\t    };\r\n\t    /**\r\n\t     * 根据名称在指定的服务项列表中查找服务项。\r\n\t     * @virtual\r\n\t     * @param  {string} name 服务名称。\r\n\t     * @param  {ISet<IServiceStorage>} storages 服务仓储列表。\r\n\t     * @returns ServiceEntry\r\n\t     */\r\n\t    ServiceStorageBase.prototype.findByName = function (name, storages) {\r\n\t        if (!name || !storages) {\r\n\t            return null;\r\n\t        }\r\n\t        for (var i = 0; i < storages.size; i++) {\r\n\t            var storage = storages.get(i);\r\n\t            // 获取当前仓储的迭代器\r\n\t            var enumerator = storage.getEnumerator();\r\n\t            while (enumerator.next()) {\r\n\t                var entry = enumerator.current;\r\n\t                if (!entry) {\r\n\t                    continue;\r\n\t                }\r\n\t                // 如果名称匹配成功则返回\r\n\t                if (entry.name === name) {\r\n\t                    return entry;\r\n\t                }\r\n\t                // 如果当前服务项是一个服务容器\r\n\t                if (entry.serviceType && runtime.Type.isAssignableFrom(serviceProvider.default, entry.serviceType)) {\r\n\t                    var provider = entry.service;\r\n\t                    // 如果当前服务项对应的服务容器不在外部容器列表中，则将当前服务项(服务容器)加入到外部服务容器列表中\r\n\t                    if (provider && !storages.has(provider.storage)) {\r\n\t                        storages.add(provider.storage);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        // 返回空(查找失败)\r\n\t        return null;\r\n\t    };\r\n\t    /**\r\n\t     * 根据指定的类型进行寻找。\r\n\t     * @virtual\r\n\t     * @param  {Function | string} type 要查找的服务类型。\r\n\t     * @param  {boolean} isMultiplex 是否为多个结果。\r\n\t     * @returns any\r\n\t     */\r\n\t    ServiceStorageBase.prototype.findByType = function (type, isMultiplex) {\r\n\t        // 从当前容器及其外链容器中查找指定类型的服务\r\n\t        var result = this.searchService(type, isMultiplex, new collections.Set(this));\r\n\t        var succeed = !runtime.Type.isEmptyObject(result);\r\n\t        if (succeed) {\r\n\t            // 如果查找结果是一个空 Set，则标识查找失败，继续往下查找\r\n\t            if (result instanceof collections.Set && result.size === 0) {\r\n\t                succeed = false;\r\n\t            }\r\n\t        }\r\n\t        // 如果上面的查找失败，则尝试从默认服务容器及其外链容器中查找指定类型的服务\r\n\t        var defaultProvider = serviceProviderFactory.default.instance.default;\r\n\t        if (!succeed && defaultProvider && defaultProvider.storage !== this) {\r\n\t            result = this.searchService(type, isMultiplex, new collections.Set(defaultProvider.storage));\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    /**\r\n\t     * 在指定的仓储中搜索类型。\r\n\t     * @private\r\n\t     * @returns any\r\n\t     */\r\n\t    ServiceStorageBase.prototype.searchService = function (type, isMultiplex, storages) {\r\n\t        if (!type || !storages) {\r\n\t            return null;\r\n\t        }\r\n\t        var weaklys = new collections.Set();\r\n\t        var strongs = new collections.Set();\r\n\t        for (var i = 0; i < storages.size; i++) {\r\n\t            var storage = storages.get(i);\r\n\t            // 获取当前仓储的迭代器\r\n\t            var enumerator = storage.getEnumerator();\r\n\t            // 迭代查找服务，首先进行类型匹配然后再进行匹配比对\r\n\t            while (enumerator.next()) {\r\n\t                var entry = enumerator.current;\r\n\t                if (!entry || !entry.serviceType) {\r\n\t                    continue;\r\n\t                }\r\n\t                // 如果服务项声明了契约，则按契约声明进行匹配\r\n\t                if (entry.hasContracts) {\r\n\t                    // 契约的严格匹配\r\n\t                    if (runtime.Type.isFunction(type) && entry.contractTypes.indexOf(type) !== -1) {\r\n\t                        if (!isMultiplex) {\r\n\t                            return entry;\r\n\t                        }\r\n\t                        strongs.add(entry);\r\n\t                    }\r\n\t                    // 契约的弱匹配\r\n\t                    else {\r\n\t                        for (var _i = 0, _a = entry.contractTypes; _i < _a.length; _i++) {\r\n\t                            var contract = _a[_i];\r\n\t                            if (runtime.Type.isAssignableFrom(type, contract)) {\r\n\t                                weaklys.add(entry);\r\n\t                            }\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                // 处理未声明契约的服务\r\n\t                else {\r\n\t                    // 服务类型的严格匹配\r\n\t                    if (runtime.Type.isFunction(type) && entry.serviceType === type) {\r\n\t                        if (!isMultiplex) {\r\n\t                            return entry;\r\n\t                        }\r\n\t                        strongs.add(entry);\r\n\t                    }\r\n\t                    // 服务类型的弱匹配\r\n\t                    else {\r\n\t                        if (runtime.Type.isAssignableFrom(type, entry.serviceType)) {\r\n\t                            weaklys.add(entry);\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                // 如果只查找单个服务\r\n\t                if (!isMultiplex) {\r\n\t                    // 如果只查找单个服务，并且弱匹配已成功则退出查找\r\n\t                    if (weaklys.size > 0) {\r\n\t                        break;\r\n\t                    }\r\n\t                    // 如果当前服务项是一个服务容器\r\n\t                    if (entry.serviceType && runtime.Type.isAssignableFrom(serviceProvider.default, entry.serviceType)) {\r\n\t                        var provider = entry.service;\r\n\t                        // 如果当前服务项对应的服务容器不在外部容器列表中，则将当前服务项(服务容器)加入到外部服务容器列表中\r\n\t                        if (provider && !storages.has(provider.storage)) {\r\n\t                            storages.add(provider.storage);\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            if (isMultiplex) {\r\n\t                return strongs.union(weaklys);\r\n\t            }\r\n\t            else if (weaklys.size > 0) {\r\n\t                return weaklys.get(0);\r\n\t            }\r\n\t        }\r\n\t        // 返回空(查找失败)\r\n\t        return null;\r\n\t    };\r\n\t    return ServiceStorageBase;\r\n\t}());\r\n\texports.default = ServiceStorageBase;\r\n\t});\r\n\r\n\tunwrapExports(serviceStorageBase);\r\n\r\n\tvar serviceStorage = createCommonjsModule(function (module, exports) {\r\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\r\n\t    var extendStatics = function (d, b) {\r\n\t        extendStatics = Object.setPrototypeOf ||\r\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t        return extendStatics(d, b);\r\n\t    };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * 表示一个用于存取服务项的仓储容器。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar ServiceStorage = /** @class */ (function (_super) {\r\n\t    __extends(ServiceStorage, _super);\r\n\t    /**\r\n\t     * 初始化服务仓储的实例。\r\n\t     * @param  {IServiceProvider} provider\r\n\t     */\r\n\t    function ServiceStorage(provider) {\r\n\t        var _this = _super.call(this, provider) || this;\r\n\t        _this._entries = new collections.Set();\r\n\t        _this._namedEntries = new collections.Map();\r\n\t        return _this;\r\n\t    }\r\n\t    Object.defineProperty(ServiceStorage.prototype, \"size\", {\r\n\t        /**\r\n\t         * 获取当前实际存储的服务项总数。\r\n\t         * @override\r\n\t         * @property\r\n\t         * @returns number\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._entries.size;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 清空当前仓储下的所有服务项。\r\n\t     * @override\r\n\t     * @returns void\r\n\t     */\r\n\t    ServiceStorage.prototype.clear = function () {\r\n\t        this._entries.clear();\r\n\t        this._namedEntries.clear();\r\n\t    };\r\n\t    /**\r\n\t     * 移除指定名称的服务项。\r\n\t     * @override\r\n\t     * @returns ServiceEntry 移除后的服务项。\r\n\t     */\r\n\t    ServiceStorage.prototype.remove = function (name) {\r\n\t        if (!name) {\r\n\t            return null;\r\n\t        }\r\n\t        var entry = null;\r\n\t        if (this._namedEntries.has(name)) {\r\n\t            entry = this._namedEntries.get(name);\r\n\t            this._entries.delete(entry);\r\n\t            this._namedEntries.delete(name);\r\n\t        }\r\n\t        return entry;\r\n\t    };\r\n\t    ServiceStorage.prototype.get = function () {\r\n\t        var args = arguments;\r\n\t        // 首先从命名项的字典中查找指定名称的服务项\r\n\t        if (runtime.Type.isString(args[0]) && this._namedEntries.has(args[0])) {\r\n\t            return this._namedEntries.get(args[0]);\r\n\t        }\r\n\t        // 调用父类的查找逻辑\r\n\t        return _super.prototype.get.call(this, args[0]);\r\n\t    };\r\n\t    /**\r\n\t     * 返回一个循环访问集合的枚举器。\r\n\t     * @returns IEnumerator\r\n\t     */\r\n\t    ServiceStorage.prototype.getEnumerator = function () {\r\n\t        return this._entries.getEnumerator();\r\n\t    };\r\n\t    /**\r\n\t     * 对当前仓储进行迭代处理。\r\n\t     * @override\r\n\t     * @param  {Function} callback 每次迭代中执行的回掉函数，当前迭代项及它的索引号将被作为参数传入该方法。\r\n\t     * @param  {any} scope 回掉函数中 this 所引用的对象。\r\n\t     * @returns void\r\n\t     */\r\n\t    ServiceStorage.prototype.forEach = function (callback, scope) {\r\n\t        this._entries.forEach(callback, scope);\r\n\t    };\r\n\t    /**\r\n\t     * 添加一个服务项至仓储中。\r\n\t     * @override\r\n\t     * @param  {ServiceEntry} entry 服务项实例。\r\n\t     * @returns void\r\n\t     */\r\n\t    ServiceStorage.prototype.insert = function (entry) {\r\n\t        if (!entry) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        if (entry.name) {\r\n\t            this._namedEntries.set(entry.name, entry);\r\n\t        }\r\n\t        this._entries.add(entry);\r\n\t    };\r\n\t    return ServiceStorage;\r\n\t}(serviceStorageBase.default));\r\n\texports.default = ServiceStorage;\r\n\t});\r\n\r\n\tunwrapExports(serviceStorage);\r\n\r\n\tvar serviceProvider = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * 用于检索服务对象的提供程序。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar ServiceProvider = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化服务提供程序的新实例。\r\n\t     * @param  {IServiceStorage} storage 服务仓储实例。\r\n\t     * @param  {IServiceBuilder} builder 服务生成器实例。\r\n\t     */\r\n\t    function ServiceProvider(storage, builder) {\r\n\t        // 如果服务仓储为空，则使用默认的仓储\r\n\t        storage = storage || new serviceStorage.default(this);\r\n\t        this._storage = storage;\r\n\t        this._builder = builder;\r\n\t    }\r\n\t    Object.defineProperty(ServiceProvider.prototype, \"storage\", {\r\n\t        /**\r\n\t         * 获取服务仓储实例。\r\n\t         * @property\r\n\t         * @returns IServiceStorage\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._storage;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(ServiceProvider.prototype, \"builder\", {\r\n\t        /**\r\n\t         * 获取服务生成器实例。\r\n\t         * @property\r\n\t         * @returns IServiceBuilder\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._builder;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    ServiceProvider.prototype.register = function () {\r\n\t        var args = arguments, entry;\r\n\t        switch (args.length) {\r\n\t            // 签名匹配: \r\n\t            // register(name: string, serviceType: Function): void;\r\n\t            // register(name: string, service: any): void;\r\n\t            // register(serviceType: Function, contractTypes?: Array<Function>): void;\r\n\t            // register(service: any, contractTypes?: Array<Function>): void;\r\n\t            case 1:\r\n\t            // tslint:disable-next-line:no-magic-numbers\r\n\t            case 2:\r\n\t                {\r\n\t                    if (runtime.Type.isString(args[0])) {\r\n\t                        // 参数匹配: name: string, serviceType: Function\r\n\t                        // 参数匹配: name: string, service: any\r\n\t                        entry = new serviceEntry.default(args[0], args[1], null);\r\n\t                    }\r\n\t                    else {\r\n\t                        // 参数匹配: serviceType: Function, contractTypes?: Array<Function>\r\n\t                        // 参数匹配: service: any, contractTypes?: Array<Function>\r\n\t                        entry = new serviceEntry.default(args[0], args[1]);\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t            // 签名匹配: \r\n\t            // register(name: string, serviceType: Function, contractTypes?: Array<Function>): void;\r\n\t            // register(name: string, service: any, contractTypes?: Array<Function>): void;\r\n\t            // tslint:disable-next-line:no-magic-numbers\r\n\t            case 3:\r\n\t                {\r\n\t                    // 参数匹配: name: string, serviceType: Function, contractTypes?: Array<Function>\r\n\t                    // 参数匹配: name: string, service: any, contractTypes?: Array<Function>\r\n\t                    // tslint:disable-next-line:no-magic-numbers\r\n\t                    entry = new serviceEntry.default(args[0], args[1], args[2]);\r\n\t                    break;\r\n\t                }\r\n\t        }\r\n\t        if (!entry) {\r\n\t            throw new exceptions.ArgumentException(\"Can not register service, please check the arguments.\");\r\n\t        }\r\n\t        // 将服务项添加至服务仓储中\r\n\t        this._storage.add(entry);\r\n\t    };\r\n\t    /**\r\n\t     * 移除指定名称的服务。\r\n\t     * @param  {string} name 服务名称。\r\n\t     * @returns void\r\n\t     */\r\n\t    ServiceProvider.prototype.unregister = function (name) {\r\n\t        this._storage.remove(name);\r\n\t    };\r\n\t    ServiceProvider.prototype.resolve = function () {\r\n\t        // 通过服务仓储获取服务项\r\n\t        var entry = this._storage.get(arguments[0]);\r\n\t        if (!runtime.Type.isEmptyObject(entry)) {\r\n\t            // 根据服务项解析服务\r\n\t            return this.getService(entry);\r\n\t        }\r\n\t        return null;\r\n\t    };\r\n\t    /**\r\n\t     * 根据指定服务类型获取所有服务实例。\r\n\t     * @param  {Function} serviceType\r\n\t     * @returns IEnumerable\r\n\t     */\r\n\t    ServiceProvider.prototype.resolveAll = function (serviceType) {\r\n\t        var _this = this;\r\n\t        var result = new collections.Set(), entries = this._storage.getAll(serviceType);\r\n\t        entries.forEach(function (entry) {\r\n\t            result.add(_this.getService(entry));\r\n\t        });\r\n\t        return result;\r\n\t    };\r\n\t    /**\r\n\t     * 根据服务项获取服务实例。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @param  {ServiceEntry} entry\r\n\t     * @returns any 如果获取到服务则返回服务实例，否则为 null。\r\n\t     */\r\n\t    ServiceProvider.prototype.getService = function (entry) {\r\n\t        if (!entry) {\r\n\t            return null;\r\n\t        }\r\n\t        var result = entry.service;\r\n\t        // 如果服务项未包含服务实例，则尝试用生成器生成实例\r\n\t        if (runtime.Type.isEmptyObject(result)) {\r\n\t            var builder = this._builder;\r\n\t            if (builder) {\r\n\t                result = builder.build(entry);\r\n\t            }\r\n\t        }\r\n\t        return result || reflection.Activator.createInstance(entry.serviceType);\r\n\t    };\r\n\t    return ServiceProvider;\r\n\t}());\r\n\texports.default = ServiceProvider;\r\n\t});\r\n\r\n\tunwrapExports(serviceProvider);\r\n\r\n\tvar serviceProviderFactory = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * 提供关于服务供应程序容器的功能。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar ServiceProviderFactory = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化服务提供程序工厂的新实例。\r\n\t     * @param  {string} defaultName 默认提供程序名称。\r\n\t     */\r\n\t    function ServiceProviderFactory(defaultName) {\r\n\t        if (defaultName === void 0) { defaultName = \"\"; }\r\n\t        this._defaultName = defaultName;\r\n\t        this._providers = new collections.Map();\r\n\t    }\r\n\t    Object.defineProperty(ServiceProviderFactory, \"instance\", {\r\n\t        /**\r\n\t         * 获取一个服务提供程序工厂的单实例。\r\n\t         * @static\r\n\t         * @property\r\n\t         * @returns ServiceProviderFactory\r\n\t         */\r\n\t        get: function () {\r\n\t            if (!this._instance) {\r\n\t                this._instance = new ServiceProviderFactory();\r\n\t            }\r\n\t            return this._instance;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(ServiceProviderFactory.prototype, \"default\", {\r\n\t        /**\r\n\t         * 获取或设置默认的服务提供程序。\r\n\t         * @property\r\n\t         */\r\n\t        get: function () {\r\n\t            var provicer = this.getProvider(this._defaultName);\r\n\t            if (!provicer) {\r\n\t                provicer = new serviceProvider.default();\r\n\t                this.register(this._defaultName, provicer);\r\n\t            }\r\n\t            return provicer;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            if (!value) {\r\n\t                throw new exceptions.ArgumentException();\r\n\t            }\r\n\t            this.register(this._defaultName, value);\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 注册服务提供程序。\r\n\t     * @param  {string} name 要注册的服务供应程序的名称。\r\n\t     * @param  {IServiceProvider} provider 服务提供程序实例。\r\n\t     * @returns void\r\n\t     */\r\n\t    ServiceProviderFactory.prototype.register = function (name, provider) {\r\n\t        if (runtime.Type.isEmptyObject(name)) {\r\n\t            throw new exceptions.ArgumentException(\"name\");\r\n\t        }\r\n\t        this._providers.set(name.trim(), provider);\r\n\t    };\r\n\t    /**\r\n\t     * 注销服务提供程序。\r\n\t     * @param  {string} name 要注销的服务提供程序名称。\r\n\t     */\r\n\t    ServiceProviderFactory.prototype.unregister = function (name) {\r\n\t        if (runtime.Type.isEmptyObject(name)) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        this._providers.delete(name.trim());\r\n\t    };\r\n\t    /**\r\n\t     * 获取指定名称的服务供应程序。\r\n\t     * @param  {string} name 指定的服务供应程序名称。\r\n\t     * @returns IServiceProvider 返回指定名称的服务供应程序。\r\n\t     */\r\n\t    ServiceProviderFactory.prototype.getProvider = function (name) {\r\n\t        if (runtime.Type.isEmptyObject(name)) {\r\n\t            throw new exceptions.ArgumentException(\"name\");\r\n\t        }\r\n\t        name = name.trim();\r\n\t        if (this._providers.has(name)) {\r\n\t            return this._providers.get(name);\r\n\t        }\r\n\t        return null;\r\n\t    };\r\n\t    /**\r\n\t     * 返回一个循环访问集合的枚举器。\r\n\t     * @returns IEnumerator<KeyValuePair<string, IServiceProvider>>\r\n\t     */\r\n\t    ServiceProviderFactory.prototype.getEnumerator = function () {\r\n\t        return this._providers.getEnumerator();\r\n\t    };\r\n\t    /**\r\n\t     * 对 IEnumerable<T> 进行迭代处理。\r\n\t     * @param  {Function} callback 每次迭代中执行的回掉函数，当前迭代项将被作为参数传入该函数。\r\n\t     * @param  {any} scope 回掉函数中 this 所引用的对象。\r\n\t     * @returns void\r\n\t     */\r\n\t    ServiceProviderFactory.prototype.forEach = function (callback, scope) {\r\n\t        this._providers.forEach(callback, scope);\r\n\t    };\r\n\t    return ServiceProviderFactory;\r\n\t}());\r\n\texports.default = ServiceProviderFactory;\r\n\t});\r\n\r\n\tunwrapExports(serviceProviderFactory);\r\n\r\n\tvar injectable_1 = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * 标注当前类型是一个可注入的服务。\r\n\t * @summary 如果未指定 providerName 参数则默认注入至默认服务容器中。\r\n\t * @param providerName 服务容器名称。\r\n\t */\r\n\tfunction injectable(providerName) {\r\n\t    return function (serviceType) {\r\n\t        var factory = serviceProviderFactory.default.instance, provider = providerName ? factory.getProvider(providerName) : factory.default;\r\n\t        provider.register(serviceType);\r\n\t    };\r\n\t}\r\n\texports.default = injectable;\r\n\t});\r\n\r\n\tunwrapExports(injectable_1);\r\n\r\n\tvar workerStateChangedEventArgs = createCommonjsModule(function (module, exports) {\r\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\r\n\t    var extendStatics = function (d, b) {\r\n\t        extendStatics = Object.setPrototypeOf ||\r\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t        return extendStatics(d, b);\r\n\t    };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * 表示工作器状态改变后的事件参数。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar WorkerStateChangedEventArgs = /** @class */ (function (_super) {\r\n\t    __extends(WorkerStateChangedEventArgs, _super);\r\n\t    /**\r\n\t     * 初始化 WorkerStateChangedEventArgs 类的新实例。\r\n\t     * @param {string} type 事件类型。\r\n\t     * @param  {string} actionName 操作名称。\r\n\t     * @param  {WorkerState} state 发生改变的状态。\r\n\t     * @param  {Error} error 发生状态改变时产生的异常。\r\n\t     */\r\n\t    function WorkerStateChangedEventArgs(type, actionName, state, error) {\r\n\t        var _this = _super.call(this, type) || this;\r\n\t        _this.actionName = actionName;\r\n\t        _this.state = state;\r\n\t        _this.error = error;\r\n\t        return _this;\r\n\t    }\r\n\t    return WorkerStateChangedEventArgs;\r\n\t}(events.EventArgs));\r\n\texports.default = WorkerStateChangedEventArgs;\r\n\t});\r\n\r\n\tunwrapExports(workerStateChangedEventArgs);\r\n\r\n\tvar workerBase = createCommonjsModule(function (module, exports) {\r\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\r\n\t    var extendStatics = function (d, b) {\r\n\t        extendStatics = Object.setPrototypeOf ||\r\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t        return extendStatics(d, b);\r\n\t    };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n\t    return new (P || (P = Promise))(function (resolve, reject) {\r\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n\t        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n\t    });\r\n\t};\r\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\r\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\r\n\t    function step(op) {\r\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\r\n\t        while (_) try {\r\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\r\n\t            switch (op[0]) {\r\n\t                case 0: case 1: t = op; break;\r\n\t                case 4: _.label++; return { value: op[1], done: false };\r\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n\t                default:\r\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n\t                    if (t[2]) _.ops.pop();\r\n\t                    _.trys.pop(); continue;\r\n\t            }\r\n\t            op = body.call(thisArg, _);\r\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n\t    }\r\n\t};\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\t/**\r\n\t * 关于工作器的抽象类。\r\n\t * 实现子类应当重写 onStart onStop 这两个方法。\r\n\t *\r\n\t * @abstract\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t * jason\r\n\t */\r\n\tvar WorkerBase = /** @class */ (function (_super) {\r\n\t    __extends(WorkerBase, _super);\r\n\t    /**\r\n\t     * 初始化工作器的新实例。\r\n\t     * @constructor\r\n\t     * @param  {string} name 工作器名称。\r\n\t     */\r\n\t    function WorkerBase(name) {\r\n\t        var _this = _super.call(this) || this;\r\n\t        /**\r\n\t         * 表示当工作器状态改变后产生的事件。\r\n\t         * @event WorkerStateChangedEventArgs\r\n\t         */\r\n\t        _this.STATE_CHANGED = \"stateChanged\";\r\n\t        _this._name = name;\r\n\t        _this._disabled = false;\r\n\t        _this._canPauseAndContinue = false;\r\n\t        _this._state = 0 /* stopped */;\r\n\t        return _this;\r\n\t    }\r\n\t    Object.defineProperty(WorkerBase.prototype, \"name\", {\r\n\t        /**\r\n\t         * 获取当前工作器的名称。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._name;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(WorkerBase.prototype, \"state\", {\r\n\t        /**\r\n\t         * 获取工作器的状态。\r\n\t         * @property\r\n\t         * @returns WorkerState\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._state;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(WorkerBase.prototype, \"disabled\", {\r\n\t        /**\r\n\t         * 获取或设置是否禁用工作器。\r\n\t         * @property\r\n\t         * @returns boolean\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._disabled;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            if (this._disabled === value) {\r\n\t                return;\r\n\t            }\r\n\t            this._disabled = value;\r\n\t            if (value) {\r\n\t                this.stop();\r\n\t            }\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(WorkerBase.prototype, \"canPauseAndContinue\", {\r\n\t        /**\r\n\t         * 获取工作器是否允许暂停和继续。\r\n\t         * @property\r\n\t         * @returns boolean\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._canPauseAndContinue;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            if (this._state !== 0 /* stopped */) {\r\n\t                throw new exceptions.InvalidOperationException();\r\n\t            }\r\n\t            this._canPauseAndContinue = value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 启动工作器。\r\n\t     * @async\r\n\t     * @param args 启动的参数。\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkerBase.prototype.start = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i] = arguments[_i];\r\n\t        }\r\n\t        return __awaiter(this, void 0, void 0, function () {\r\n\t            var ex_1;\r\n\t            return __generator(this, function (_a) {\r\n\t                switch (_a.label) {\r\n\t                    case 0:\r\n\t                        if (this._disabled || this._state !== 0 /* stopped */) {\r\n\t                            return [2 /*return*/];\r\n\t                        }\r\n\t                        // 更新当前状态为“启动中”\r\n\t                        this._state = 1 /* starting */;\r\n\t                        _a.label = 1;\r\n\t                    case 1:\r\n\t                        _a.trys.push([1, 3, , 4]);\r\n\t                        // 调用启动抽象方法，已执行实际的启动操作\r\n\t                        return [4 /*yield*/, this.onStart.apply(this, args)];\r\n\t                    case 2:\r\n\t                        // 调用启动抽象方法，已执行实际的启动操作\r\n\t                        _a.sent();\r\n\t                        // 更新当前状态为“运行中”\r\n\t                        this._state = 2 /* running */;\r\n\t                        // 激发“StateChanged”事件\r\n\t                        this.onStateChanged(new workerStateChangedEventArgs.default(this.STATE_CHANGED, \"start\", 2 /* running */));\r\n\t                        return [3 /*break*/, 4];\r\n\t                    case 3:\r\n\t                        ex_1 = _a.sent();\r\n\t                        this._state = 0 /* stopped */;\r\n\t                        // 激发“StateChanged”事件\r\n\t                        this.onStateChanged(new workerStateChangedEventArgs.default(this.STATE_CHANGED, \"start\", 0 /* stopped */, ex_1));\r\n\t                        throw ex_1;\r\n\t                    case 4: return [2 /*return*/];\r\n\t                }\r\n\t            });\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 停止工作器。\r\n\t     * @async\r\n\t     * @param args 停止的参数。\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkerBase.prototype.stop = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i] = arguments[_i];\r\n\t        }\r\n\t        return __awaiter(this, void 0, void 0, function () {\r\n\t            var originalState, ex_2;\r\n\t            return __generator(this, function (_a) {\r\n\t                switch (_a.label) {\r\n\t                    case 0:\r\n\t                        originalState = this._state;\r\n\t                        if (this._disabled || originalState === 6 /* stopping */ || originalState === 0 /* stopped */) {\r\n\t                            return [2 /*return*/];\r\n\t                        }\r\n\t                        // 更新当前状态为“正在停止中”\r\n\t                        this._state = 6 /* stopping */;\r\n\t                        _a.label = 1;\r\n\t                    case 1:\r\n\t                        _a.trys.push([1, 3, , 4]);\r\n\t                        // 调用停止抽象方法，以执行实际的停止操作\r\n\t                        return [4 /*yield*/, this.onStop.apply(this, args)];\r\n\t                    case 2:\r\n\t                        // 调用停止抽象方法，以执行实际的停止操作\r\n\t                        _a.sent();\r\n\t                        // 更新当前状态为\"已停止\"\r\n\t                        this._state = 0 /* stopped */;\r\n\t                        // 激发“StateChanged”事件\r\n\t                        this.onStateChanged(new workerStateChangedEventArgs.default(this.STATE_CHANGED, \"stop\", 0 /* stopped */));\r\n\t                        return [3 /*break*/, 4];\r\n\t                    case 3:\r\n\t                        ex_2 = _a.sent();\r\n\t                        // 还原状态\r\n\t                        this._state = originalState;\r\n\t                        // 激发“StateChanged”事件\r\n\t                        this.onStateChanged(new workerStateChangedEventArgs.default(this.STATE_CHANGED, \"stop\", originalState, ex_2));\r\n\t                        throw ex_2;\r\n\t                    case 4: return [2 /*return*/];\r\n\t                }\r\n\t            });\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 暂停工作器。\r\n\t     * @async\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkerBase.prototype.pause = function () {\r\n\t        return __awaiter(this, void 0, void 0, function () {\r\n\t            var originalState, ex_3;\r\n\t            return __generator(this, function (_a) {\r\n\t                switch (_a.label) {\r\n\t                    case 0:\r\n\t                        originalState = this._state;\r\n\t                        if (this._disabled || !this._canPauseAndContinue) {\r\n\t                            return [2 /*return*/];\r\n\t                        }\r\n\t                        if (originalState !== 2 /* running */) {\r\n\t                            return [2 /*return*/];\r\n\t                        }\r\n\t                        // 更新当前状态为\"正在暂停中\"\r\n\t                        this._state = 3 /* pausing */;\r\n\t                        _a.label = 1;\r\n\t                    case 1:\r\n\t                        _a.trys.push([1, 3, , 4]);\r\n\t                        // 执行暂停操作\r\n\t                        return [4 /*yield*/, this.onPause()];\r\n\t                    case 2:\r\n\t                        // 执行暂停操作\r\n\t                        _a.sent();\r\n\t                        // 更新当前状态为\"已经暂停\"\r\n\t                        this._state = 4 /* paused */;\r\n\t                        // 激发“StateChanged”事件\r\n\t                        this.onStateChanged(new workerStateChangedEventArgs.default(this.STATE_CHANGED, \"pause\", 4 /* paused */));\r\n\t                        return [3 /*break*/, 4];\r\n\t                    case 3:\r\n\t                        ex_3 = _a.sent();\r\n\t                        // 还原状态\r\n\t                        this._state = originalState;\r\n\t                        // 激发“StateChanged”事件\r\n\t                        this.onStateChanged(new workerStateChangedEventArgs.default(this.STATE_CHANGED, \"pause\", originalState, ex_3));\r\n\t                        throw ex_3;\r\n\t                    case 4: return [2 /*return*/];\r\n\t                }\r\n\t            });\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 恢复工作器，继续运行。\r\n\t     * @async\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkerBase.prototype.resume = function () {\r\n\t        return __awaiter(this, void 0, void 0, function () {\r\n\t            var originalState, e_1;\r\n\t            return __generator(this, function (_a) {\r\n\t                switch (_a.label) {\r\n\t                    case 0:\r\n\t                        originalState = this._state;\r\n\t                        if (this._disabled || !this._canPauseAndContinue) {\r\n\t                            return [2 /*return*/];\r\n\t                        }\r\n\t                        if (originalState !== 4 /* paused */) {\r\n\t                            return [2 /*return*/];\r\n\t                        }\r\n\t                        // 更新当前状态为\"正在恢复中\"\r\n\t                        this._state = 5 /* resuming */;\r\n\t                        _a.label = 1;\r\n\t                    case 1:\r\n\t                        _a.trys.push([1, 3, , 4]);\r\n\t                        // 执行恢复\r\n\t                        return [4 /*yield*/, this.onResume()];\r\n\t                    case 2:\r\n\t                        // 执行恢复\r\n\t                        _a.sent();\r\n\t                        // 更新当前状态为\"运行中\"\r\n\t                        this._state = 2 /* running */;\r\n\t                        // 激发“StateChanged”事件\r\n\t                        this.onStateChanged(new workerStateChangedEventArgs.default(this.STATE_CHANGED, \"resume\", 2 /* running */));\r\n\t                        return [3 /*break*/, 4];\r\n\t                    case 3:\r\n\t                        e_1 = _a.sent();\r\n\t                        // 还原状态\r\n\t                        this._state = originalState;\r\n\t                        // 激发“StateChanged”事件\r\n\t                        this.onStateChanged(new workerStateChangedEventArgs.default(this.STATE_CHANGED, \"resume\", originalState, e_1));\r\n\t                        throw e_1;\r\n\t                    case 4: return [2 /*return*/];\r\n\t                }\r\n\t            });\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 当工作器暂停时调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @async\r\n\t     * @returns void\r\n\t     */\r\n\t    // tslint:disable-next-line:no-empty\r\n\t    WorkerBase.prototype.onPause = function () {\r\n\t        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n\t            return [2 /*return*/];\r\n\t        }); });\r\n\t    };\r\n\t    /**\r\n\t     * 当工作器恢复时调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @async\r\n\t     * @returns void\r\n\t     */\r\n\t    // tslint:disable-next-line:no-empty    \r\n\t    WorkerBase.prototype.onResume = function () {\r\n\t        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n\t            return [2 /*return*/];\r\n\t        }); });\r\n\t    };\r\n\t    /**\r\n\t     * 当工作器状态发生改变时调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @param  {WorkerStateChangedEventArgs} args 事件参数。\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkerBase.prototype.onStateChanged = function (args) {\r\n\t        this.dispatchEvent(this.STATE_CHANGED, args);\r\n\t    };\r\n\t    return WorkerBase;\r\n\t}(events.EventProvider));\r\n\texports.default = WorkerBase;\r\n\t});\r\n\r\n\tunwrapExports(workerBase);\r\n\r\n\tvar workerState = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t/**\r\n\t * 关于工作器的状态信息。\r\n\t * @enum\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar WorkerState;\r\n\t(function (WorkerState) {\r\n\t    /**\r\n\t     * 未运行/已停止。\r\n\t     * @member\r\n\t     */\r\n\t    WorkerState[WorkerState[\"stopped\"] = 0] = \"stopped\";\r\n\t    /**\r\n\t     * 正在启动中。\r\n\t     * @member\r\n\t     */\r\n\t    WorkerState[WorkerState[\"starting\"] = 1] = \"starting\";\r\n\t    /**\r\n\t     * 运行中。\r\n\t     * @member\r\n\t     */\r\n\t    WorkerState[WorkerState[\"running\"] = 2] = \"running\";\r\n\t    /**\r\n\t     * 正在暂停中。\r\n\t     * @member\r\n\t     */\r\n\t    WorkerState[WorkerState[\"pausing\"] = 3] = \"pausing\";\r\n\t    /**\r\n\t     * 已暂停。\r\n\t     * @member\r\n\t     */\r\n\t    WorkerState[WorkerState[\"paused\"] = 4] = \"paused\";\r\n\t    /**\r\n\t     * 正在恢复中。\r\n\t     * @member\r\n\t     */\r\n\t    WorkerState[WorkerState[\"resuming\"] = 5] = \"resuming\";\r\n\t    /**\r\n\t     * 正在停止中。\r\n\t     * @member\r\n\t     */\r\n\t    WorkerState[WorkerState[\"stopping\"] = 6] = \"stopping\";\r\n\t})(WorkerState = exports.WorkerState || (exports.WorkerState = {}));\r\n\t});\r\n\r\n\tunwrapExports(workerState);\r\n\tvar workerState_1 = workerState.WorkerState;\r\n\r\n\tvar services = createCommonjsModule(function (module, exports) {\r\n\t/*!\r\n\t * @Authors:\r\n\t *      jason <jasonsoop@gmail.com>\r\n\t *      Evan <skcy@vip.qq.com>\r\n\t *\r\n\t * @Date:  2019-06-25 16:05:55\r\n\t * @version: 1.0.0\r\n\t * Licensed under the MIT License.\r\n\t * Copyright (C) 2010-present UXmid Inc. All rights reserved.\r\n\t */\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\texports.Injectable = injectable_1.default;\r\n\r\n\texports.ServiceEntry = serviceEntry.default;\r\n\r\n\texports.ServiceProvider = serviceProvider.default;\r\n\r\n\texports.ServiceProviderFactory = serviceProviderFactory.default;\r\n\r\n\texports.ServiceStorage = serviceStorage.default;\r\n\r\n\texports.ServiceStorageBase = serviceStorageBase.default;\r\n\r\n\texports.WorkerBase = workerBase.default;\r\n\r\n\texports.WorkerStateChangedEventArgs = workerStateChangedEventArgs.default;\r\n\r\n\texports.WorkerState = workerState.WorkerState;\r\n\t});\r\n\r\n\tunwrapExports(services);\r\n\tvar services_1 = services.Injectable;\r\n\tvar services_2 = services.ServiceEntry;\r\n\tvar services_3 = services.ServiceProvider;\r\n\tvar services_4 = services.ServiceProviderFactory;\r\n\tvar services_5 = services.ServiceStorage;\r\n\tvar services_6 = services.ServiceStorageBase;\r\n\tvar services_7 = services.WorkerBase;\r\n\tvar services_8 = services.WorkerStateChangedEventArgs;\r\n\tvar services_9 = services.WorkerState;\r\n\r\n\tvar applicationContextBase = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\r\n\tvar CREDENTIALL_SYMBOL = \"__credential__\";\r\n\t/**\r\n\t * 表示实现该抽象类的是一个应用程序上下文。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar ApplicationContextBase = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化应用程序上下文的新实例。\r\n\t     * @protected\r\n\t     * @param applicationId 应用程序的唯一代号。\r\n\t     */\r\n\t    function ApplicationContextBase(applicationId) {\r\n\t        if (applicationId) {\r\n\t            this._applicationId = applicationId;\r\n\t        }\r\n\t    }\r\n\t    Object.defineProperty(ApplicationContextBase.prototype, \"applicationId\", {\r\n\t        /**\r\n\t         * 获取或设置当前应用程序唯一代号。\r\n\t         * @summary 注意：本属性一旦被设置则不能被更改。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._applicationId;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            if (!value) {\r\n\t                throw new exceptions.ArgumentException(\"value\");\r\n\t            }\r\n\t            if (this._applicationId) {\r\n\t                throw new exceptions.InvalidOperationException(\"The ApplicationId has specified already.\");\r\n\t            }\r\n\t            this._applicationId = value.trim();\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(ApplicationContextBase.prototype, \"title\", {\r\n\t        /**\r\n\t         * 获取或设置当前应用程序的标题。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._title;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._title = value || \"\";\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(ApplicationContextBase.prototype, \"serviceFactory\", {\r\n\t        /**\r\n\t         * 获取当前应用程序的服务管理对象。\r\n\t         * @property\r\n\t         * @returns IServiceProviderFactory\r\n\t         */\r\n\t        get: function () {\r\n\t            return services.ServiceProviderFactory.instance;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(ApplicationContextBase.prototype, \"modules\", {\r\n\t        /**\r\n\t         * 获取当前应用程序的模块集合。\r\n\t         * @property\r\n\t         * @returns ISet\r\n\t         */\r\n\t        get: function () {\r\n\t            if (!this._modules) {\r\n\t                this._modules = new collections.Set();\r\n\t            }\r\n\t            return this._modules;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(ApplicationContextBase.prototype, \"credential\", {\r\n\t        /**\r\n\t         * 获取或设置当前用户的安全凭证。\r\n\t         * @property\r\n\t         * @returns ICredential\r\n\t         */\r\n\t        get: function () {\r\n\t            // 如果内存没有凭证，则从 LocalStorage 中获取\r\n\t            if (!this._credential) {\r\n\t                this._credential = io.LocalStorage.get(CREDENTIALL_SYMBOL);\r\n\t            }\r\n\t            return this._credential;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._credential = value;\r\n\t            // 将安全凭证存入 LocalStorage 中\r\n\t            io.LocalStorage.set(CREDENTIALL_SYMBOL, value);\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(ApplicationContextBase.prototype, \"states\", {\r\n\t        /**\r\n\t         * 获取当前应用的状态字典。\r\n\t         * @property\r\n\t         * @returns IMap\r\n\t         */\r\n\t        get: function () {\r\n\t            if (!this._states) {\r\n\t                this._states = new collections.Map();\r\n\t            }\r\n\t            return this._states;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(ApplicationContextBase.prototype, \"workbench\", {\r\n\t        /**\r\n\t         * 获取当前应用程序的工作台(主界面)。\r\n\t         * 必须使用 Application 类的 start 方法，启动应用程序后才能使用该属性获取到创建成功的工作台对象。\r\n\t         * @property\r\n\t         * @returns IWorkbench\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._workbench;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 返回当前应用程序的工作台(主界面)。\r\n\t     * @param args 初始化的参数。\r\n\t     * @returns IWorkbench 返回新建或已创建的工作台对象。\r\n\t     */\r\n\t    ApplicationContextBase.prototype.getWorkbench = function (args) {\r\n\t        if (!this._workbench) {\r\n\t            // 创建工作台对象\r\n\t            this._workbench = this.createWorkbench(args);\r\n\t        }\r\n\t        return this._workbench;\r\n\t    };\r\n\t    return ApplicationContextBase;\r\n\t}());\r\n\texports.default = ApplicationContextBase;\r\n\t});\r\n\r\n\tunwrapExports(applicationContextBase);\r\n\r\n\tvar workbenchBase = createCommonjsModule(function (module, exports) {\r\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\r\n\t    var extendStatics = function (d, b) {\r\n\t        extendStatics = Object.setPrototypeOf ||\r\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t        return extendStatics(d, b);\r\n\t    };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n\t    return new (P || (P = Promise))(function (resolve, reject) {\r\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n\t        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n\t    });\r\n\t};\r\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\r\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\r\n\t    function step(op) {\r\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\r\n\t        while (_) try {\r\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\r\n\t            switch (op[0]) {\r\n\t                case 0: case 1: t = op; break;\r\n\t                case 4: _.label++; return { value: op[1], done: false };\r\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n\t                default:\r\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n\t                    if (t[2]) _.ops.pop();\r\n\t                    _.trys.pop(); continue;\r\n\t            }\r\n\t            op = body.call(thisArg, _);\r\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n\t    }\r\n\t};\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\t/**\r\n\t * 提供工作台的基本封装，建议自定义工作台从此类继承。\r\n\t * @abstract\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar WorkbenchBase = /** @class */ (function (_super) {\r\n\t    __extends(WorkbenchBase, _super);\r\n\t    /**\r\n\t     * 初始化工作台的新实例。\r\n\t     * @protected\r\n\t     * @param  {ApplicationContextBase} applicationContext+\r\n\t     */\r\n\t    function WorkbenchBase(applicationContext) {\r\n\t        var _this = _super.call(this) || this;\r\n\t        /**\r\n\t         * 当工作台正在打开时产生的事件。\r\n\t         * @event EventArgs\r\n\t         */\r\n\t        _this.OPENING = \"opening\";\r\n\t        /**\r\n\t         * 当工作台被打开后产生的事件。\r\n\t         * @event EventArgs\r\n\t         */\r\n\t        _this.OPENED = \"opened\";\r\n\t        /**\r\n\t         * 当工作台正在取消激活时产生的事件。\r\n\t         * @event EventArgs\r\n\t         */\r\n\t        _this.DEACTIVATING = \"deactivating\";\r\n\t        /**\r\n\t         * 当工作台取消激活后产生的事件。\r\n\t         * @event EventArgs\r\n\t         */\r\n\t        _this.DEACTIVATED = \"deactivated\";\r\n\t        /**\r\n\t         * 当工作台正在激活时产生的事件。\r\n\t         * @event EventArgs\r\n\t         */\r\n\t        _this.ACTIVATING = \"activating\";\r\n\t        /**\r\n\t         * 当工作台正在关闭时产生的事件。\r\n\t         * @event CancelEventArgs\r\n\t         */\r\n\t        _this.CLOSING = \"closing\";\r\n\t        /**\r\n\t         * 当工作台被关闭后产生的事件。\r\n\t         * @event EventArgs\r\n\t         */\r\n\t        _this.CLOSED = \"closed\";\r\n\t        /**\r\n\t         * 当工作台标题被更改后产生的事件。\r\n\t         * @event EventArgs\r\n\t         */\r\n\t        _this.TITLE_CHANGED = \"title_changed\";\r\n\t        if (!applicationContext) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        _this._status = 0 /* closed */;\r\n\t        _this._title = applicationContext.title;\r\n\t        _this._applicationContext = applicationContext;\r\n\t        return _this;\r\n\t    }\r\n\t    Object.defineProperty(WorkbenchBase.prototype, \"status\", {\r\n\t        /**\r\n\t         * 获取工作台的当前状态。\r\n\t         * @property\r\n\t         * @returns WorkbenchStatus\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._status;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(WorkbenchBase.prototype, \"title\", {\r\n\t        /**\r\n\t         * 获取或设置工作台的标题。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._title;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            // 如果与之前的标题相等，则不处理\r\n\t            if (this._title === value) {\r\n\t                return;\r\n\t            }\r\n\t            this._title = value ? value : \"\";\r\n\t            // 通知标题被更改\r\n\t            this.onTitleChanged();\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(WorkbenchBase.prototype, \"applicationContext\", {\r\n\t        /**\r\n\t         * 获取工作台所属的应用程序上下文实例。\r\n\t         * @property\r\n\t         * @returns ApplicationContextBase\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._applicationContext;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 打开工作台。\r\n\t     * @async\r\n\t     * @param  {Array<string>} args\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.open = function (args) {\r\n\t        return __awaiter(this, void 0, void 0, function () {\r\n\t            var ex_1;\r\n\t            return __generator(this, function (_a) {\r\n\t                switch (_a.label) {\r\n\t                    case 0:\r\n\t                        // 如果工作台已经启动过则不处理\r\n\t                        if (this._status !== 0 /* closed */) {\r\n\t                            return [2 /*return*/];\r\n\t                        }\r\n\t                        try {\r\n\t                            // 通知工作台正在打开中\r\n\t                            this.onOpening();\r\n\t                        }\r\n\t                        catch (ex) {\r\n\t                            // 注意：可能因为预打开事件处理程序或工作台构建过程出错，都必须重置工作台状态为\"closed\"\r\n\t                            this._status = 0 /* closed */;\r\n\t                            // 重抛异常，导致后续的关闭代码不能继续\r\n\t                            throw ex;\r\n\t                        }\r\n\t                        _a.label = 1;\r\n\t                    case 1:\r\n\t                        _a.trys.push([1, 3, , 4]);\r\n\t                        // 调用虚拟方法以执行实际启动的操作\r\n\t                        return [4 /*yield*/, this.onOpen(args)];\r\n\t                    case 2:\r\n\t                        // 调用虚拟方法以执行实际启动的操作\r\n\t                        _a.sent();\r\n\t                        return [3 /*break*/, 4];\r\n\t                    case 3:\r\n\t                        ex_1 = _a.sent();\r\n\t                        // 注意：如果在实际启动操作中，子类可能已经通过 onOpened 方法设置了工作台状态为运行，则无需再重置工作台状态；\r\n\t                        // 否则必须重置工作台状态为\"closed\"\r\n\t                        if (this._status === 1 /* opening */) {\r\n\t                            this._status = 0 /* closed */;\r\n\t                        }\r\n\t                        // 重抛异常，导致后续的关闭代码不能继续，故而上面代码重置了工作台状态\r\n\t                        throw ex_1;\r\n\t                    case 4:\r\n\t                        if (this._status === 1 /* opening */) {\r\n\t                            // 通知工作台打开完成\r\n\t                            this.onOpened();\r\n\t                        }\r\n\t                        return [2 /*return*/];\r\n\t                }\r\n\t            });\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 关闭工作台。\r\n\t     * @async\r\n\t     * @returns Promise<boolean>\r\n\t     */\r\n\t    WorkbenchBase.prototype.close = function () {\r\n\t        return __awaiter(this, void 0, void 0, function () {\r\n\t            var originalStatus, args, ex_2;\r\n\t            return __generator(this, function (_a) {\r\n\t                switch (_a.label) {\r\n\t                    case 0:\r\n\t                        originalStatus = this._status;\r\n\t                        // 如果工作台正在关闭或已经关闭，则直接退出\r\n\t                        if (originalStatus === 6 /* closing */ || originalStatus === 0 /* closed */) {\r\n\t                            return [2 /*return*/, false];\r\n\t                        }\r\n\t                        if (originalStatus === 1 /* opening */) {\r\n\t                            throw new exceptions.InvalidOperationException();\r\n\t                        }\r\n\t                        args = new events.CancelEventArgs(this.CLOSING);\r\n\t                        try {\r\n\t                            this.onClosing(args);\r\n\t                        }\r\n\t                        catch (ex) {\r\n\t                            // 注意：由于事件处理程序出错，必须还原工作台状态\r\n\t                            this._status = originalStatus;\r\n\t                            // 重抛异常，导致后续的关闭代码不能继续，故而上面代码重置了工作台状态\r\n\t                            throw ex;\r\n\t                        }\r\n\t                        // 如果事件处理程序要取消后续的关闭操作，则重置工作台状态\r\n\t                        if (args.cancel === true) {\r\n\t                            // 还原工作台状态\r\n\t                            this._status = originalStatus;\r\n\t                            // 因为取消关闭，所以退出后续关闭操作\r\n\t                            return [2 /*return*/, false];\r\n\t                        }\r\n\t                        _a.label = 1;\r\n\t                    case 1:\r\n\t                        _a.trys.push([1, 3, , 4]);\r\n\t                        // 调用虚拟方法以进行实际的关闭操作\r\n\t                        return [4 /*yield*/, this.onClose()];\r\n\t                    case 2:\r\n\t                        // 调用虚拟方法以进行实际的关闭操作\r\n\t                        _a.sent();\r\n\t                        return [3 /*break*/, 4];\r\n\t                    case 3:\r\n\t                        ex_2 = _a.sent();\r\n\t                        // 注意：如果在实际关闭操作中，子类可能已经通过 onClosed 方法设置了工作台状态为关闭，则无需再重置工作台状态；\r\n\t                        // 否则必须还原工作台状态\r\n\t                        if (this._status === 6 /* closing */) {\r\n\t                            this._status = originalStatus;\r\n\t                        }\r\n\t                        // 重抛异常，导致后续的关闭代码不能继续，故而上面代码重置了工作台状态\r\n\t                        throw ex_2;\r\n\t                    case 4:\r\n\t                        if (this._status !== 0 /* closed */) {\r\n\t                            // 通知工作台关闭完成\r\n\t                            this.onClosed();\r\n\t                        }\r\n\t                        // 返回成功\r\n\t                        return [2 /*return*/, true];\r\n\t                }\r\n\t            });\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 取消激活工作台。\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.deactivate = function () {\r\n\t        // 保存原来的状态\r\n\t        var originalStatus = this._status;\r\n\t        // 如果工作台不是在运行中，则直接退出\r\n\t        if (originalStatus !== 2 /* running */) {\r\n\t            return;\r\n\t        }\r\n\t        try {\r\n\t            // 通知工作台正在失去焦点中\r\n\t            this.onDeactivateing();\r\n\t        }\r\n\t        catch (ex) {\r\n\t            // 还原状态\r\n\t            this._status = originalStatus;\r\n\t            // 重抛异常，导致后续的代码不能继续\r\n\t            throw ex;\r\n\t        }\r\n\t        try {\r\n\t            // 调用虚拟方法以执行实际失去焦点操作\r\n\t            this.onDeactivate();\r\n\t        }\r\n\t        catch (ex) {\r\n\t            // 注意：如果在实际取消激活操作中，子类可能已经通过 onDeactivated 方法设置了工作台状态为已经取消激活，则无需再重置工作台状态；\r\n\t            // 否则必须重置工作台状态为原来的状态\r\n\t            if (this._status === 3 /* deactivating */) {\r\n\t                // 还原状态\r\n\t                this._status = originalStatus;\r\n\t            }\r\n\t            // 重抛异常，导致后续的关闭代码不能继续，故而上面代码重置了工作台状态\r\n\t            throw ex;\r\n\t        }\r\n\t        if (this._status !== 4 /* deactivated */) {\r\n\t            // 通知工作台取消激活完成\r\n\t            this.onDeactivated();\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 激活工作台。\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.activate = function () {\r\n\t        // 保存原来的状态\r\n\t        var originalStatus = this._status;\r\n\t        // 如果工作台不是在取消激活中，则直接退出\r\n\t        if (originalStatus !== 4 /* deactivated */) {\r\n\t            return;\r\n\t        }\r\n\t        try {\r\n\t            // 通知工作台正在获得焦点中\r\n\t            this.onActivating();\r\n\t        }\r\n\t        catch (ex) {\r\n\t            // 还原状态\r\n\t            this._status = originalStatus;\r\n\t            // 重抛异常，导致后续的代码不能继续\r\n\t            throw ex;\r\n\t        }\r\n\t        try {\r\n\t            // 调用虚拟方法以执行实际获得焦点操作\r\n\t            this.onActivate();\r\n\t        }\r\n\t        catch (ex) {\r\n\t            // 注意：如果在实际取消激活操作中，子类可能已经通过 onActivated 方法设置了工作台状态为正在运行，则无需再重置工作台状态；\r\n\t            // 否则必须重置工作台状态为原来的状态\r\n\t            if (this._status === 5 /* activating */) {\r\n\t                // 还原状态\r\n\t                this._status = originalStatus;\r\n\t            }\r\n\t            // 重抛异常，导致后续的关闭代码不能继续，故而上面代码重置了工作台状态\r\n\t            throw ex;\r\n\t        }\r\n\t        if (this._status === 5 /* activating */) {\r\n\t            // 通知工作台取消激活完成\r\n\t            this.onActivated();\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 当准备打开工作台时调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.onOpening = function () {\r\n\t        // 更改工作台状态为\"opening\"\r\n\t        this._status = 1 /* opening */;\r\n\t        // 激发工作台\"opening\"事件\r\n\t        this.dispatchEvent(this.OPENING);\r\n\t    };\r\n\t    /**\r\n\t     * 当工作台打开时调用。\r\n\t     * @async\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @param  {Array<string>} args\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.onOpen = function (args) {\r\n\t        return __awaiter(this, void 0, void 0, function () {\r\n\t            return __generator(this, function (_a) {\r\n\t                return [2 /*return*/];\r\n\t            });\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 当工作台打开完成时调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.onOpened = function () {\r\n\t        // 更改工作台状态为\"running\"\r\n\t        this._status = 2 /* running */;\r\n\t        // 激发工作台\"opened\"事件\r\n\t        this.dispatchEvent(this.OPENED);\r\n\t    };\r\n\t    /**\r\n\t     * 当准备关闭工作台时调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @param  {CancelEventArgs} event\r\n\t     */\r\n\t    WorkbenchBase.prototype.onClosing = function (event) {\r\n\t        // 设置工作台的状态为\"closing\"\r\n\t        this._status = 6 /* closing */;\r\n\t        // 激发工作台\"closing\"事件\r\n\t        this.dispatchEvent(event);\r\n\t    };\r\n\t    /**\r\n\t     * 当工作台关闭时调用。\r\n\t     * @async\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.onClose = function () {\r\n\t        return __awaiter(this, void 0, void 0, function () {\r\n\t            return __generator(this, function (_a) {\r\n\t                return [2 /*return*/];\r\n\t            });\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 当工作台关闭完成时调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.onClosed = function () {\r\n\t        // 更改工作台状态为\"closed\"\r\n\t        this._status = 0 /* closed */;\r\n\t        // 激发工作台\"closed\"事件\r\n\t        this.dispatchEvent(this.CLOSED);\r\n\t    };\r\n\t    /**\r\n\t     * 当工作台准备失去焦点时调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.onDeactivateing = function () {\r\n\t        // 设置工作台的状态为\"deactivating\"\r\n\t        this._status = 3 /* deactivating */;\r\n\t        // 激发工作台\"deactivating\"事件\r\n\t        this.dispatchEvent(this.DEACTIVATING);\r\n\t    };\r\n\t    /**\r\n\t     * 当工作台失去焦点时调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.onDeactivate = function () {\r\n\t        // virtual\r\n\t    };\r\n\t    /**\r\n\t     * 当工作台失去焦点后调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.onDeactivated = function () {\r\n\t        // 设置工作台的状态为\"deactivated\"\r\n\t        this._status = 4 /* deactivated */;\r\n\t        // 激发工作台\"deactivated\"事件\r\n\t        this.dispatchEvent(this.DEACTIVATED);\r\n\t    };\r\n\t    /**\r\n\t     * 当工作台准备获得焦时调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.onActivating = function () {\r\n\t        // 设置工作台的状态为\"activating\"\r\n\t        this._status = 5 /* activating */;\r\n\t        // 激发工作台\"activating\"事件\r\n\t        this.dispatchEvent(this.ACTIVATING);\r\n\t    };\r\n\t    /**\r\n\t     * 当工作台获得焦时调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.onActivate = function () {\r\n\t        // virtual\r\n\t    };\r\n\t    /**\r\n\t     * 当工作台获得焦后调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.onActivated = function () {\r\n\t        // 设置工作台的状态为\"running\"\r\n\t        this._status = 2 /* running */;\r\n\t    };\r\n\t    /**\r\n\t     * 当工作台标题更改后调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @returns void\r\n\t     */\r\n\t    WorkbenchBase.prototype.onTitleChanged = function () {\r\n\t        // 激发工作台\"titleChanged\"事件\r\n\t        this.dispatchEvent(this.TITLE_CHANGED);\r\n\t    };\r\n\t    return WorkbenchBase;\r\n\t}(events.EventProvider));\r\n\texports.default = WorkbenchBase;\r\n\t});\r\n\r\n\tunwrapExports(workbenchBase);\r\n\r\n\tvar workbenchStatus = createCommonjsModule(function (module, exports) {\r\n\t/**\r\n\t * 表示工作台的运行状态。\r\n\t * @enum\r\n\t * @version 1.0.0\r\n\t */\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar WorkbenchStatus;\r\n\t(function (WorkbenchStatus) {\r\n\t    /**\r\n\t     * 未开始或已关闭。\r\n\t     * @member\r\n\t     */\r\n\t    WorkbenchStatus[WorkbenchStatus[\"closed\"] = 0] = \"closed\";\r\n\t    /**\r\n\t     * 正在打开中。\r\n\t     * @member\r\n\t     */\r\n\t    WorkbenchStatus[WorkbenchStatus[\"opening\"] = 1] = \"opening\";\r\n\t    /**\r\n\t     * 正常运行。\r\n\t     * @member\r\n\t     */\r\n\t    WorkbenchStatus[WorkbenchStatus[\"running\"] = 2] = \"running\";\r\n\t    /**\r\n\t     * 取消激活中。\r\n\t     * @member\r\n\t     */\r\n\t    WorkbenchStatus[WorkbenchStatus[\"deactivating\"] = 3] = \"deactivating\";\r\n\t    /**\r\n\t     * 已被取消激活。\r\n\t     * @member\r\n\t     */\r\n\t    WorkbenchStatus[WorkbenchStatus[\"deactivated\"] = 4] = \"deactivated\";\r\n\t    /**\r\n\t     * 正在激活中。\r\n\t     * @member\r\n\t     */\r\n\t    WorkbenchStatus[WorkbenchStatus[\"activating\"] = 5] = \"activating\";\r\n\t    /**\r\n\t     * 正在关闭中。\r\n\t     * @member\r\n\t     */\r\n\t    WorkbenchStatus[WorkbenchStatus[\"closing\"] = 6] = \"closing\";\r\n\t})(WorkbenchStatus = exports.WorkbenchStatus || (exports.WorkbenchStatus = {}));\r\n\t});\r\n\r\n\tunwrapExports(workbenchStatus);\r\n\tvar workbenchStatus_1 = workbenchStatus.WorkbenchStatus;\r\n\r\n\tvar application$1 = createCommonjsModule(function (module, exports) {\r\n\t/*!\r\n\t * @Authors:\r\n\t *      jason <jasonsoop@gmail.com>\r\n\t *      Evan <skcy@vip.qq.com>\r\n\t *\r\n\t * @Date:  2019-06-25 16:05:55\r\n\t * @version: 1.0.0\r\n\t * Licensed under the MIT License.\r\n\t * Copyright (C) 2010-present UXmid Inc. All rights reserved.\r\n\t */\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\texports.Application = application.default;\r\n\r\n\texports.ApplicationContextBase = applicationContextBase.default;\r\n\r\n\texports.ApplicationEventArgs = applicationEventArgs.default;\r\n\r\n\texports.WorkbenchBase = workbenchBase.default;\r\n\r\n\texports.WorkbenchStatus = workbenchStatus.WorkbenchStatus;\r\n\t});\r\n\r\n\tunwrapExports(application$1);\r\n\tvar application_2 = application$1.Application;\r\n\tvar application_3 = application$1.ApplicationContextBase;\r\n\tvar application_4 = application$1.ApplicationEventArgs;\r\n\tvar application_5 = application$1.WorkbenchBase;\r\n\tvar application_6 = application$1.WorkbenchStatus;\r\n\r\n\tvar broadcast = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\t/**\r\n\t * 表示一条广播信息。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar Broadcast = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化一个广播新实例。\r\n\t     * @property\r\n\t     * @param  {string} uri 广播描述符。\r\n\t     * @param  {Map<string, any>} extras 携带的数据。\r\n\t     */\r\n\t    function Broadcast(uri, extras) {\r\n\t        if (!uri || !common.RegexUtils.uri.test(uri)) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        this._uri = uri;\r\n\t        this._scheme = RegExp.$1;\r\n\t        this._action = RegExp.$2;\r\n\t        this._extras = extras || new collections.Map();\r\n\t    }\r\n\t    Object.defineProperty(Broadcast.prototype, \"scheme\", {\r\n\t        /**\r\n\t         * 获取广播的方案。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._scheme;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(Broadcast.prototype, \"action\", {\r\n\t        /**\r\n\t         * 获取广播的动作。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._action;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(Broadcast.prototype, \"uri\", {\r\n\t        /**\r\n\t         * 获取广播的标识符。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._uri;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(Broadcast.prototype, \"extras\", {\r\n\t        /**\r\n\t         * 获取广播携带的数据。\r\n\t         * @property\r\n\t         * @returns Map\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._extras;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    return Broadcast;\r\n\t}());\r\n\texports.default = Broadcast;\r\n\t});\r\n\r\n\tunwrapExports(broadcast);\r\n\r\n\tvar broadcastContext = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * 广播在传播过程中使用的上下文参数。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar BroadcastContext = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化广播上下文的新实例。\r\n\t     * @param  {BroadcastManager} manager 广播管理器。\r\n\t     * @param  {Broadcast} broadcast 广播实例。\r\n\t     */\r\n\t    function BroadcastContext(manager, broadcast) {\r\n\t        if (!manager || !broadcast) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        this._manager = manager;\r\n\t        this._scheme = broadcast.scheme;\r\n\t        this._action = broadcast.action;\r\n\t        this._uri = broadcast.uri;\r\n\t        this._extras = broadcast.extras;\r\n\t        this._aborted = false;\r\n\t    }\r\n\t    Object.defineProperty(BroadcastContext.prototype, \"manager\", {\r\n\t        /**\r\n\t         * 获取广播所在的广播管理器实例。\r\n\t         * @property\r\n\t         * @returns BroadcastManager\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._manager;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(BroadcastContext.prototype, \"scheme\", {\r\n\t        /**\r\n\t         * 获取广播的方案。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._scheme;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(BroadcastContext.prototype, \"action\", {\r\n\t        /**\r\n\t         * 获取广播的动作。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._action;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(BroadcastContext.prototype, \"uri\", {\r\n\t        /**\r\n\t         * 获取广播的标识符。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._uri;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(BroadcastContext.prototype, \"extras\", {\r\n\t        /**\r\n\t         * 获取广播携带的数据。\r\n\t         * @property\r\n\t         * @returns Map<string, any>\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._extras;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(BroadcastContext.prototype, \"aborted\", {\r\n\t        /**\r\n\t         * 表示是否阻止广播继续传播。\r\n\t         * @property\r\n\t         * @returns boolean\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._aborted;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 阻止广播在本次传播中继续进行传播。\r\n\t     * @returns void\r\n\t     */\r\n\t    BroadcastContext.prototype.abort = function () {\r\n\t        this._aborted = true;\r\n\t    };\r\n\t    return BroadcastContext;\r\n\t}());\r\n\texports.default = BroadcastContext;\r\n\t});\r\n\r\n\tunwrapExports(broadcastContext);\r\n\r\n\tvar broadcastContract = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\t/**\r\n\t * 表示一个广播契约。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar BroadcastContract = /** @class */ (function () {\r\n\t    function BroadcastContract() {\r\n\t        var args = arguments;\r\n\t        // 匹配签名: constructor(uri: string)\r\n\t        if (args.length === 1) {\r\n\t            var uri = args[0];\r\n\t            if (!common.RegexUtils.uri.test(uri)) {\r\n\t                throw new exceptions.ArgumentException();\r\n\t            }\r\n\t            this._scheme = RegExp.$1;\r\n\t            this.actions.add(RegExp.$2);\r\n\t        }\r\n\t        // 匹配签名: constructor(scheme: string, actions: Array<string>)\r\n\t        else {\r\n\t            var scheme = args[0], actions = args[1];\r\n\t            if (!scheme || !common.RegexUtils.scheme.test(scheme) || !actions) {\r\n\t                throw new exceptions.ArgumentException();\r\n\t            }\r\n\t            // 保存协议方案\r\n\t            this._scheme = scheme;\r\n\t            // 保存协议动作\r\n\t            for (var _i = 0, actions_1 = actions; _i < actions_1.length; _i++) {\r\n\t                var method = actions_1[_i];\r\n\t                this.actions.add(method);\r\n\t            }\r\n\t        }\r\n\t        // 设置默认优先级\r\n\t        this._priority = 0 /* normal */;\r\n\t    }\r\n\t    Object.defineProperty(BroadcastContract.prototype, \"scheme\", {\r\n\t        /**\r\n\t         * 获取广播契约的方案。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._scheme;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(BroadcastContract.prototype, \"priority\", {\r\n\t        /**\r\n\t         * 获取或设置广播接收时的优先顺序。\r\n\t         * @property\r\n\t         * @returns number\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._priority;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._priority = value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(BroadcastContract.prototype, \"actions\", {\r\n\t        /**\r\n\t         * 获取广播契约所拥有的动作。\r\n\t         * @property\r\n\t         * @returns Set\r\n\t         */\r\n\t        get: function () {\r\n\t            if (!this._actions) {\r\n\t                this._actions = new collections.Set();\r\n\t            }\r\n\t            return this._actions;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    return BroadcastContract;\r\n\t}());\r\n\texports.default = BroadcastContract;\r\n\t});\r\n\r\n\tunwrapExports(broadcastContract);\r\n\r\n\tvar broadcastReceiverEntry = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t/**\r\n\t * 提供用于检索广播接收器广播项。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar BroadcastReceiverEntry = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化广播项的新实例。\r\n\t     * @param  {BroadcastContract} contract 广播契约。\r\n\t     * @param  {IBroadcastReceiver} receiver 广播接收器。\r\n\t     */\r\n\t    function BroadcastReceiverEntry(contract, receiver) {\r\n\t        this._contract = contract;\r\n\t        this._receiver = receiver;\r\n\t    }\r\n\t    Object.defineProperty(BroadcastReceiverEntry.prototype, \"priority\", {\r\n\t        /**\r\n\t         * 获取广播接收优先级。\r\n\t         * @property\r\n\t         * @returns number\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._contract.priority;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(BroadcastReceiverEntry.prototype, \"contract\", {\r\n\t        /**\r\n\t         * 获取广播契约实例。\r\n\t         * @property\r\n\t         * @returns BroadcastContract\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._contract;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(BroadcastReceiverEntry.prototype, \"receiver\", {\r\n\t        /**\r\n\t         * 获取广播接收器实例。\r\n\t         * @property\r\n\t         * @returns IBroadcastReceiver\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._receiver;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    return BroadcastReceiverEntry;\r\n\t}());\r\n\texports.default = BroadcastReceiverEntry;\r\n\t});\r\n\r\n\tunwrapExports(broadcastReceiverEntry);\r\n\r\n\tvar broadcastReceiverProvider = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\t/**\r\n\t * 提供用于检索广播接收器对象的机制。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar BroadcastReceiverProvider = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化广播接收器提供程序的新实例。\r\n\t     * @constructor\r\n\t     */\r\n\t    function BroadcastReceiverProvider() {\r\n\t        this._entries = new collections.Map();\r\n\t    }\r\n\t    /**\r\n\t     * 注册一个广播接收器至容器中。\r\n\t     * @param  {BroadcastContract} contract 广播契约。\r\n\t     * @param  {IBroadcastReceiver} receiver 广播接收器。\r\n\t     * @returns void\r\n\t     */\r\n\t    BroadcastReceiverProvider.prototype.register = function (contract, receiver) {\r\n\t        var _this = this;\r\n\t        if (!contract || !receiver) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        contract.actions.forEach(function (action) {\r\n\t            // 根据契约 scheme + action 组合成 uri 注册\r\n\t            var uri = contract.scheme.concat(action), set = _this._entries.get(uri);\r\n\t            if (!set) {\r\n\t                set = new collections.Set();\r\n\t                _this._entries.set(uri, set);\r\n\t            }\r\n\t            set.add(new broadcastReceiverEntry.default(contract, receiver));\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 移除指定契约的广播接收器。\r\n\t     * @param  {BroadcastContract} contract 广播契约。\r\n\t     * @returns void\r\n\t     */\r\n\t    BroadcastReceiverProvider.prototype.unregister = function (contract) {\r\n\t        var _this = this;\r\n\t        if (!contract) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        contract.actions.forEach(function (action) {\r\n\t            // 根据契约 scheme + action 组合成 uri 注册\r\n\t            var uri = contract.scheme.concat(action);\r\n\t            if (_this._entries.has(uri)) {\r\n\t                _this._entries.delete(uri);\r\n\t            }\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 根据指定广播实例获取所有广播接收器实例。\r\n\t     * @param  {Broadcast} broadcast 广播实例。\r\n\t     * @returns IEnumerable<IBroadcastReceiver>\r\n\t     */\r\n\t    BroadcastReceiverProvider.prototype.resolve = function (broadcast) {\r\n\t        if (this._entries.has(broadcast.uri)) {\r\n\t            var entries = this._entries.get(broadcast.uri), receivers_1 = new collections.Set();\r\n\t            // 根据优先级排序\r\n\t            entries.sort(function (a, b) { return b.priority - a.priority; });\r\n\t            // 追加至返回列表中\r\n\t            entries.forEach(function (entry) { return receivers_1.add(entry.receiver); });\r\n\t            return receivers_1;\r\n\t        }\r\n\t        return new collections.Set();\r\n\t    };\r\n\t    return BroadcastReceiverProvider;\r\n\t}());\r\n\texports.default = BroadcastReceiverProvider;\r\n\t});\r\n\r\n\tunwrapExports(broadcastReceiverProvider);\r\n\r\n\tvar broadcastManager = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * 提供用于广播注册发布等功能。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar BroadcastManager = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化广播管理器的新实例。\r\n\t     * @param  {IBroadcastReceiverProvider} receiverProvider 广播接收器提供程序。\r\n\t     */\r\n\t    function BroadcastManager(receiverProvider) {\r\n\t        this._eventProvider = new events.EventProvider(this);\r\n\t        this._receiverProvider = receiverProvider || new broadcastReceiverProvider.default();\r\n\t    }\r\n\t    Object.defineProperty(BroadcastManager.prototype, \"eventProvider\", {\r\n\t        /**\r\n\t         * 获取一个事件提供程序。\r\n\t         * @protected\r\n\t         * @property\r\n\t         * @returns IEventProvider\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._eventProvider;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(BroadcastManager.prototype, \"receiverProvider\", {\r\n\t        /**\r\n\t         * 获取一个广播接收器提供程序。\r\n\t         * @protected\r\n\t         * @property\r\n\t         * @returns IBroadcastReceiverProvider\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._receiverProvider;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(BroadcastManager, \"instance\", {\r\n\t        /**\r\n\t         * 获取广播管理器的单实例。\r\n\t         * @static\r\n\t         * @returns BroadcastManager\r\n\t         */\r\n\t        get: function () {\r\n\t            if (!this._instance) {\r\n\t                this._instance = new BroadcastManager();\r\n\t            }\r\n\t            return this._instance;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 基于指定的契约注册一个广播接收程序。\r\n\t     * @param  {BroadcastContract} contract 广播契约。\r\n\t     * @param  {IBroadcastReceiver} receiver 接收程序。\r\n\t     * @returns void\r\n\t     */\r\n\t    BroadcastManager.prototype.register = function (contract, receiver) {\r\n\t        // 将协议注册至事件提供程序中\r\n\t        if (!this.eventProvider.hasListener(contract.scheme)) {\r\n\t            this.eventProvider.addListener(contract.scheme, this.onReceive, this);\r\n\t        }\r\n\t        // 将接收程序注册至服务提供程序中\r\n\t        this.receiverProvider.register(contract, receiver);\r\n\t    };\r\n\t    /**\r\n\t     * 移除指定契约的广播接收器。\r\n\t     * @param  {BroadcastContract} contract 广播契约。\r\n\t     * @returns void\r\n\t     */\r\n\t    BroadcastManager.prototype.unregister = function (contract) {\r\n\t        this.receiverProvider.unregister(contract);\r\n\t    };\r\n\t    /**\r\n\t     * 发送一条广播信息。\r\n\t     * @param  {Broadcast} broadcast 广播实例。\r\n\t     * @returns void\r\n\t     */\r\n\t    BroadcastManager.prototype.send = function (broadcast) {\r\n\t        if (!broadcast) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        this.eventProvider.dispatchEvent(broadcast.scheme, broadcast);\r\n\t    };\r\n\t    /**\r\n\t     * 当接收广播时调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @returns any\r\n\t     */\r\n\t    BroadcastManager.prototype.onReceive = function (request) {\r\n\t        var broadcast = request.data, receivers = this.receiverProvider.resolve(broadcast), enumerator = receivers.getEnumerator(), context = this.createBroadcastContext(broadcast);\r\n\t        while (enumerator.next()) {\r\n\t            var receiver = enumerator.current;\r\n\t            try {\r\n\t                if (context.aborted) {\r\n\t                    return;\r\n\t                }\r\n\t                receiver.receive(context);\r\n\t            }\r\n\t            catch (ex) {\r\n\t                diagnostics.Logger.error(this, ex);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 创建广播上下文实例。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @param  {Broadcast} broadcast\r\n\t     * @returns BroadcastContext\r\n\t     */\r\n\t    BroadcastManager.prototype.createBroadcastContext = function (broadcast) {\r\n\t        return new broadcastContext.default(this, broadcast);\r\n\t    };\r\n\t    return BroadcastManager;\r\n\t}());\r\n\texports.default = BroadcastManager;\r\n\t});\r\n\r\n\tunwrapExports(broadcastManager);\r\n\r\n\tvar broadcastPriority = createCommonjsModule(function (module, exports) {\r\n\t/**\r\n\t * 表示广播接收的优先级别。\r\n\t * @enum\r\n\t * @version 1.0.0\r\n\t */\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar BroadcastPriority;\r\n\t(function (BroadcastPriority) {\r\n\t    /**\r\n\t     * 默认优先级。\r\n\t     * @member\r\n\t     */\r\n\t    BroadcastPriority[BroadcastPriority[\"normal\"] = 0] = \"normal\";\r\n\t    /**\r\n\t     * 最高的。\r\n\t     * @member\r\n\t     */\r\n\t    BroadcastPriority[BroadcastPriority[\"highest\"] = 9999] = \"highest\";\r\n\t    /**\r\n\t     * 最低的。\r\n\t     * @member\r\n\t     */\r\n\t    BroadcastPriority[BroadcastPriority[\"lowest\"] = -9999] = \"lowest\";\r\n\t})(BroadcastPriority = exports.BroadcastPriority || (exports.BroadcastPriority = {}));\r\n\t});\r\n\r\n\tunwrapExports(broadcastPriority);\r\n\tvar broadcastPriority_1 = broadcastPriority.BroadcastPriority;\r\n\r\n\tvar receivable_1 = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\r\n\r\n\tvar receivers = new collections.Map();\r\n\t/**\r\n\t * 标注当前类型是一个广播接收器。\r\n\t * @param uri 广播描述符。\r\n\t * @param priority 广播优先级。\r\n\t */\r\n\tfunction receivable(uri, priority) {\r\n\t    if (!uri) {\r\n\t        throw new exceptions.InvalidOperationException(\"The broadcast uri is empty.\");\r\n\t    }\r\n\t    return function (receiverType) {\r\n\t        var receiver = receivers.get(receiverType), contract = new broadcastContract.default(uri);\r\n\t        // 设置优先级\r\n\t        if (priority) {\r\n\t            contract.priority = priority;\r\n\t        }\r\n\t        // 生成接收器实例\r\n\t        if (!receiver) {\r\n\t            receiver = reflection.Activator.createInstance(receiverType);\r\n\t            receivers.set(receiverType, receiver);\r\n\t        }\r\n\t        // 注册至管理器中\r\n\t        broadcastManager.default.instance.register(contract, receiver);\r\n\t    };\r\n\t}\r\n\texports.default = receivable;\r\n\t});\r\n\r\n\tunwrapExports(receivable_1);\r\n\r\n\tvar broadcast$1 = createCommonjsModule(function (module, exports) {\r\n\t/*!\r\n\t * @Authors:\r\n\t *      jason <jasonsoop@gmail.com>\r\n\t *      Evan <skcy@vip.qq.com>\r\n\t *\r\n\t * @Date:  2019-06-25 16:05:55\r\n\t * @version: 1.0.0\r\n\t * Licensed under the MIT License.\r\n\t * Copyright (C) 2010-present UXmid Inc. All rights reserved.\r\n\t */\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\texports.Broadcast = broadcast.default;\r\n\r\n\texports.BroadcastContext = broadcastContext.default;\r\n\r\n\texports.BroadcastContract = broadcastContract.default;\r\n\r\n\texports.BroadcastManager = broadcastManager.default;\r\n\r\n\texports.BroadcastPriority = broadcastPriority.BroadcastPriority;\r\n\r\n\texports.BroadcastReceiverEntry = broadcastReceiverEntry.default;\r\n\r\n\texports.BroadcastReceiverProvider = broadcastReceiverProvider.default;\r\n\r\n\texports.Receivable = receivable_1.default;\r\n\t});\r\n\r\n\tunwrapExports(broadcast$1);\r\n\tvar broadcast_2 = broadcast$1.Broadcast;\r\n\tvar broadcast_3 = broadcast$1.BroadcastContext;\r\n\tvar broadcast_4 = broadcast$1.BroadcastContract;\r\n\tvar broadcast_5 = broadcast$1.BroadcastManager;\r\n\tvar broadcast_6 = broadcast$1.BroadcastPriority;\r\n\tvar broadcast_7 = broadcast$1.BroadcastReceiverEntry;\r\n\tvar broadcast_8 = broadcast$1.BroadcastReceiverProvider;\r\n\tvar broadcast_9 = broadcast$1.Receivable;\r\n\r\n\tvar commandBase = createCommonjsModule(function (module, exports) {\r\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n\t    return new (P || (P = Promise))(function (resolve, reject) {\r\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n\t        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n\t    });\r\n\t};\r\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\r\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\r\n\t    function step(op) {\r\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\r\n\t        while (_) try {\r\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\r\n\t            switch (op[0]) {\r\n\t                case 0: case 1: t = op; break;\r\n\t                case 4: _.label++; return { value: op[1], done: false };\r\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n\t                default:\r\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n\t                    if (t[2]) _.ops.pop();\r\n\t                    _.trys.pop(); continue;\r\n\t            }\r\n\t            op = body.call(thisArg, _);\r\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n\t    }\r\n\t};\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\t/**\r\n\t * 提供实现 ICommand 接口功能的基类。\r\n\t * @abstract\r\n\t * @class\r\n\t * @description 建议需要完成 ICommand 接口功能的实现者从此类继承。\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar CommandBase = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化命令的新实例。\r\n\t     * @param  {string} name 命令名称。\r\n\t     * @param  {boolean} enabled 是否启用。\r\n\t     */\r\n\t    function CommandBase(name, enabled) {\r\n\t        if (name === void 0) { name = \"\"; }\r\n\t        if (enabled === void 0) { enabled = true; }\r\n\t        // 如果没有传递名称参数，则约定采用类名(除掉尾部Command)作为命令名称\r\n\t        this.name = runtime.Type.isEmptyString(name) ? common.StringUtils.trim(runtime.Type.getClassName(this), \"Command\").toLowerCase() : name;\r\n\t        this._enabled = enabled;\r\n\t    }\r\n\t    Object.defineProperty(CommandBase.prototype, \"name\", {\r\n\t        /**\r\n\t         * 获取或设置命令的名称。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._name;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            if (!value) {\r\n\t                throw new exceptions.ArgumentException();\r\n\t            }\r\n\t            if (value.indexOf(\".\") !== -1 || value.indexOf(\"/\") !== -1) {\r\n\t                throw new exceptions.ArgumentException();\r\n\t            }\r\n\t            this._name = value.trim();\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandBase.prototype, \"enabled\", {\r\n\t        /**\r\n\t         * 获取或设置当前命令是否可用。\r\n\t         * @summary 该属性作为当前命令是否可被执行的备选方案，命令是否可被执行由 canExecute 方法决定，该方法的不同实现方式可能导致不同的判断逻辑。\r\n\t         * 有关默认的判断逻辑请参考 canExecute 方法的帮助。\r\n\t         * @property\r\n\t         * @returns boolean\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._enabled;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._enabled = value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 判断当前命令能否依据给定的选项和参数执行。\r\n\t     * @virtual\r\n\t     * @param  {any} context 判断命令能否执行的上下文对象。\r\n\t     * @returns boolean 返回能否执行的结果。\r\n\t     */\r\n\t    CommandBase.prototype.canExecute = function (context) {\r\n\t        return this.enabled;\r\n\t    };\r\n\t    /**\r\n\t     * 执行命令。\r\n\t     * @summary 对实现着的要求：应该在本方法的实现中首先调用 canExecute 方法，以确保阻止非法的调用。\r\n\t     * @virtual\r\n\t     * @async\r\n\t     * @param  {any} context 执行命令的上下文对象。\r\n\t     * @returns any 返回执行的返回结果。\r\n\t     */\r\n\t    CommandBase.prototype.execute = function (context) {\r\n\t        return __awaiter(this, void 0, void 0, function () {\r\n\t            var result;\r\n\t            return __generator(this, function (_a) {\r\n\t                switch (_a.label) {\r\n\t                    case 0:\r\n\t                        // 在执行之前首先判断是否可以执行\r\n\t                        if (!this.canExecute(context)) {\r\n\t                            return [2 /*return*/, null];\r\n\t                        }\r\n\t                        return [4 /*yield*/, this.onExecute(context)];\r\n\t                    case 1:\r\n\t                        result = _a.sent();\r\n\t                        return [2 /*return*/, result];\r\n\t                }\r\n\t            });\r\n\t        });\r\n\t    };\r\n\t    return CommandBase;\r\n\t}());\r\n\texports.default = CommandBase;\r\n\t});\r\n\r\n\tunwrapExports(commandBase);\r\n\r\n\tvar commandCollection = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\t/**\r\n\t * 表示一个命令容器，用户存储命令使用。\r\n\t * @class\r\n\t * @description 该类为临时过度方案，后续将会替换为命令树的形式进行存储。\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar CommandCollection = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化命令容器的新实例。\r\n\t     * @constructor\r\n\t     */\r\n\t    function CommandCollection() {\r\n\t        this._items = new collections.Map();\r\n\t    }\r\n\t    Object.defineProperty(CommandCollection.prototype, \"size\", {\r\n\t        /**\r\n\t         * 获取命令的总数量。\r\n\t         * @property\r\n\t         * @returns number\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._items.size;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 将一个命令实例挂载至指定的的路径。\r\n\t     * @summary 如果指定的路径已存在命令将会抛出异常。\r\n\t     * @param  {string} path 路径字符串。\r\n\t     * @param  {ICommand} command 命令。\r\n\t     * @returns void\r\n\t     */\r\n\t    CommandCollection.prototype.add = function (path, command) {\r\n\t        if (this._items.has(path)) {\r\n\t            throw new exceptions.ArgumentException(\"The command path \\\"\" + path + \"\\\" is existed.\");\r\n\t        }\r\n\t        this._items.set(path, command);\r\n\t    };\r\n\t    /**\r\n\t     * 移除指定路径的命令。\r\n\t     * @param  {string} path 路径字符串。\r\n\t     * @returns boolean\r\n\t     */\r\n\t    CommandCollection.prototype.remove = function (path) {\r\n\t        return this._items.delete(path);\r\n\t    };\r\n\t    /**\r\n\t     * 根据指定的路径获取一个命令。\r\n\t     * @param  {string} path 路径字符串。\r\n\t     * @returns string\r\n\t     */\r\n\t    CommandCollection.prototype.find = function (path) {\r\n\t        var command = this._items.get(path);\r\n\t        return command || null;\r\n\t    };\r\n\t    /**\r\n\t     * 检测是否包含指定的路径的命令。\r\n\t     * @param  {string} path\r\n\t     * @returns boolean\r\n\t     */\r\n\t    CommandCollection.prototype.contains = function (path) {\r\n\t        return this._items.has(path);\r\n\t    };\r\n\t    /**\r\n\t     * 返回一个循环访问集合的枚举器。\r\n\t     * @returns IEnumerator\r\n\t     */\r\n\t    CommandCollection.prototype.getEnumerator = function () {\r\n\t        return this._items.getEnumerator();\r\n\t    };\r\n\t    /**\r\n\t     * 对 IEnumerable<T> 进行迭代处理。\r\n\t     * @param  {Function} callback 每次迭代中执行的回掉函数，当前迭代项将传入该函数。\r\n\t     * @param  {any} scope 回掉函数中 this 所引用的对象。\r\n\t     * @returns void\r\n\t     */\r\n\t    CommandCollection.prototype.forEach = function (callback, scope) {\r\n\t        this._items.forEach(callback, scope);\r\n\t    };\r\n\t    return CommandCollection;\r\n\t}());\r\n\texports.default = CommandCollection;\r\n\t});\r\n\r\n\tunwrapExports(commandCollection);\r\n\r\n\tvar commandContext = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\t/**\r\n\t * 命令在执行器过程中使用的上下文参数。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar CommandContext = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化执行命令上下文的新实例。\r\n\t     * @constructor\r\n\t     * @param  {ICommandExecutor} executor 执行命令所在的命令执行器。\r\n\t     * @param  {CommandExpression} expression 命令对应的表达式。\r\n\t     * @param  {ICommand} command 执行的命令对象。\r\n\t     * @param  {any} parameter 命令执行的传入参数。\r\n\t     * @param  {Map} extendedProperties 在本次执行过程中在各处理模块之间组织和共享数据的键/值集合。\r\n\t     */\r\n\t    function CommandContext(executor, expression, command, parameter, extendedProperties) {\r\n\t        if (extendedProperties === void 0) { extendedProperties = null; }\r\n\t        if (!command) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        this._executor = executor;\r\n\t        this._expression = expression;\r\n\t        this._command = command;\r\n\t        this._parameter = parameter;\r\n\t        this._extendedProperties = extendedProperties;\r\n\t    }\r\n\t    Object.defineProperty(CommandContext.prototype, \"executor\", {\r\n\t        /**\r\n\t         * 获取命令所在的命令执行器。\r\n\t         * @property\r\n\t         * @returns ICommandExecutor\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._executor;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandContext.prototype, \"expression\", {\r\n\t        /**\r\n\t         * 获取当前命令对应的表达式。\r\n\t         * @property\r\n\t         * @returns CommandExpression\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._expression;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandContext.prototype, \"command\", {\r\n\t        /**\r\n\t         * 获取执行的命令对象。\r\n\t         * @property\r\n\t         * @returns ICommand\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._command;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandContext.prototype, \"parameter\", {\r\n\t        /**\r\n\t         * 获取命令执行的传入参数。\r\n\t         * @property\r\n\t         * @returns any\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._parameter;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandContext.prototype, \"hasExtendedProperties\", {\r\n\t        /**\r\n\t         * 获取扩展属性集是否有内容。\r\n\t         * 在不确定扩展属性集是否含有内容之前，建议先使用该属性来检测。\r\n\t         * @property\r\n\t         * @returns boolean\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._extendedProperties && this._extendedProperties.size > 0;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandContext.prototype, \"extendedProperties\", {\r\n\t        /**\r\n\t         * 获取可用于在本次执行过程中在各处理模块之间组织和共享数据的键/值集合。\r\n\t         * @property\r\n\t         * @returns Map\r\n\t         */\r\n\t        get: function () {\r\n\t            if (!this._extendedProperties) {\r\n\t                this._extendedProperties = new collections.Map();\r\n\t            }\r\n\t            return this._extendedProperties;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    return CommandContext;\r\n\t}());\r\n\texports.default = CommandContext;\r\n\t});\r\n\r\n\tunwrapExports(commandContext);\r\n\r\n\tvar commandOptionCollection = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * 命令选项集合。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar CommandOptionCollection = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化命令选项集合的新实例。\r\n\t     * @param  {IEnumerable<KeyValuePair<string>>} items\r\n\t     */\r\n\t    function CommandOptionCollection(items) {\r\n\t        var _this = this;\r\n\t        this._items = new collections.Map();\r\n\t        if (items) {\r\n\t            items.forEach(function (item) {\r\n\t                _this._items.set(item.key, item.value);\r\n\t            });\r\n\t        }\r\n\t    }\r\n\t    Object.defineProperty(CommandOptionCollection.prototype, \"size\", {\r\n\t        /**\r\n\t         * 获取选项的数量。\r\n\t         * @property\r\n\t         * @returns number\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._items.size;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandOptionCollection.prototype, \"keys\", {\r\n\t        /**\r\n\t         * 获取所有选项键。\r\n\t         * @property\r\n\t         * @returns Array\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._items.keys();\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandOptionCollection.prototype, \"values\", {\r\n\t        /**\r\n\t         * 获取所有选项值。\r\n\t         * @property\r\n\t         * @returns Array\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._items.values();\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 根据指定的字符串键获取一个选项值。\r\n\t     * @param  {string} key\r\n\t     * @returns string\r\n\t     */\r\n\t    CommandOptionCollection.prototype.get = function (key) {\r\n\t        return this._items.get(key);\r\n\t    };\r\n\t    /**\r\n\t     * 检测是否包含指定的选项值。\r\n\t     * @param  {string} key\r\n\t     * @returns boolean\r\n\t     */\r\n\t    CommandOptionCollection.prototype.has = function (key) {\r\n\t        return this._items.has(key);\r\n\t    };\r\n\t    /**\r\n\t     * 返回一个循环访问集合的枚举器。\r\n\t     * @returns IEnumerator\r\n\t     */\r\n\t    CommandOptionCollection.prototype.getEnumerator = function () {\r\n\t        return this._items.getEnumerator();\r\n\t    };\r\n\t    /**\r\n\t     * 对 IEnumerable<T> 进行迭代处理。\r\n\t     * @param  {Function} callback 每次迭代中执行的回掉函数，当前迭代项将传入该函数。\r\n\t     * @param  {any} scope 回掉函数中 this 所引用的对象。\r\n\t     * @returns void\r\n\t     */\r\n\t    CommandOptionCollection.prototype.forEach = function (callback, scope) {\r\n\t        this._items.forEach(callback, scope);\r\n\t    };\r\n\t    return CommandOptionCollection;\r\n\t}());\r\n\texports.default = CommandOptionCollection;\r\n\t});\r\n\r\n\tunwrapExports(commandOptionCollection);\r\n\r\n\tvar commandExpression = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * 命令表达式类，提供命令的名称路径与参数选项等信息。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar CommandExpression = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化命令表达式的新实例。\r\n\t     * @param anchor 锚定点。\r\n\t     * @param name 命令名称。\r\n\t     * @param path 命令路径。\r\n\t     * @param options 命令选项。\r\n\t     * @param args 命令参数。\r\n\t     */\r\n\t    function CommandExpression(anchor, name, path, options) {\r\n\t        var args = [];\r\n\t        for (var _i = 4; _i < arguments.length; _i++) {\r\n\t            args[_i - 4] = arguments[_i];\r\n\t        }\r\n\t        this._next = null;\r\n\t        if (!name) {\r\n\t            throw new exceptions.ArgumentException(\"name\");\r\n\t        }\r\n\t        // 修缮传入的路径参数值\r\n\t        path = common.StringUtils.trim(path, \"/\", \" \", \"\\t\", \"\\r\", \"\\n\");\r\n\t        this._anchor = anchor;\r\n\t        this._name = name.trim();\r\n\t        switch (anchor) {\r\n\t            case 3 /* root */:\r\n\t                {\r\n\t                    if (!path) {\r\n\t                        this._path = \"/\";\r\n\t                    }\r\n\t                    else {\r\n\t                        this._path = \"/\" + path + \"/\";\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t            case 1 /* current */:\r\n\t                {\r\n\t                    if (!path) {\r\n\t                        this._path = \"./\";\r\n\t                    }\r\n\t                    else {\r\n\t                        this._path = \"./\" + path + \"/\";\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t            case 2 /* parent */:\r\n\t                {\r\n\t                    if (!path) {\r\n\t                        this._path = \"../\";\r\n\t                    }\r\n\t                    else {\r\n\t                        this._path = \"../\" + path + \"/\";\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t            default:\r\n\t                {\r\n\t                    if (!path) {\r\n\t                        this._path = \"\";\r\n\t                    }\r\n\t                    else {\r\n\t                        this._path = path + \"/\";\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t        }\r\n\t        this._fullPath = this._path + this._name;\r\n\t        this._options = new commandOptionCollection.default(options);\r\n\t        this._arguments = args || new Array();\r\n\t    }\r\n\t    Object.defineProperty(CommandExpression.prototype, \"name\", {\r\n\t        /**\r\n\t         * 获取命令名称。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._name;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandExpression.prototype, \"path\", {\r\n\t        /**\r\n\t         * 获取命令的路径(不包含名称)。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._path;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandExpression.prototype, \"fullPath\", {\r\n\t        /**\r\n\t         * 获取命令的完整路径(包含名称)。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._fullPath;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandExpression.prototype, \"anchor\", {\r\n\t        /**\r\n\t         * 获取命令的锚定点。\r\n\t         * @property\r\n\t         * @returns PathAnchor\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._anchor;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandExpression.prototype, \"options\", {\r\n\t        /**\r\n\t         * 获取命令的所有选项。\r\n\t         * @property\r\n\t         * @returns CommandOptionCollection\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._options;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandExpression.prototype, \"arguments\", {\r\n\t        /**\r\n\t         * 获取命令的所有参数。\r\n\t         * @property\r\n\t         * @returns string\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._arguments;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandExpression.prototype, \"next\", {\r\n\t        /**\r\n\t         * 获取获设置当前命令的下一个串联命令表达式。\r\n\t         * @property\r\n\t         * @returns CommandExpression\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._next;\r\n\t        },\r\n\t        /**\r\n\t         * 获取或设置当前命令的下一个串联命令表达式。\r\n\t         * @property\r\n\t         * @param  {CommandExpression} value\r\n\t         */\r\n\t        set: function (value) {\r\n\t            this._next = value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 将指定的文本解析为一个命令表达式。\r\n\t     * @static\r\n\t     * @param  {string} text 命令文本。\r\n\t     * @returns CommandExpression 命令表达式。\r\n\t     */\r\n\t    CommandExpression.parse = function (text) {\r\n\t        return commandExpressionParser.default.instance.parse(text);\r\n\t    };\r\n\t    return CommandExpression;\r\n\t}());\r\n\texports.default = CommandExpression;\r\n\t});\r\n\r\n\tunwrapExports(commandExpression);\r\n\r\n\tvar commandExpressionParser = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\r\n\r\n\tvar CommandPathState;\r\n\t(function (CommandPathState) {\r\n\t    CommandPathState[CommandPathState[\"none\"] = 0] = \"none\";\r\n\t    CommandPathState[CommandPathState[\"dot\"] = 1] = \"dot\";\r\n\t    CommandPathState[CommandPathState[\"doubleDot\"] = 2] = \"doubleDot\";\r\n\t    CommandPathState[CommandPathState[\"slash\"] = 3] = \"slash\";\r\n\t    CommandPathState[CommandPathState[\"part\"] = 4] = \"part\";\r\n\t})(CommandPathState || (CommandPathState = {}));\r\n\tvar CommandPairState;\r\n\t(function (CommandPairState) {\r\n\t    CommandPairState[CommandPairState[\"none\"] = 0] = \"none\";\r\n\t    CommandPairState[CommandPairState[\"slash\"] = 1] = \"slash\";\r\n\t    CommandPairState[CommandPairState[\"assign\"] = 2] = \"assign\";\r\n\t    CommandPairState[CommandPairState[\"part\"] = 3] = \"part\";\r\n\t})(CommandPairState || (CommandPairState = {}));\r\n\t/**\r\n\t * 提供命令行文本解析功能。\r\n\t * @static\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar CommandExpressionParser = /** @class */ (function () {\r\n\t    /**\r\n\t     * 私有构造。\r\n\t     * @private\r\n\t     * @constructor\r\n\t     */\r\n\t    function CommandExpressionParser() {\r\n\t    }\r\n\t    /**\r\n\t     * 将指定的命令行文本解析成命令表达式对象。\r\n\t     * @param  {string} text 指定的要解析的命令行文本。\r\n\t     * @returns CommandExpression 返回解析的命令表达式对象，如果解析失败则返回空(null)。\r\n\t     */\r\n\t    CommandExpressionParser.prototype.parse = function (text) {\r\n\t        if (!text) {\r\n\t            return null;\r\n\t        }\r\n\t        var result = null, current = null, reader = new io.StringReader(text);\r\n\t        while (reader.peek() > 0) {\r\n\t            current = this.onParse(reader);\r\n\t            if (result === null) {\r\n\t                result = current;\r\n\t            }\r\n\t            // 线性查找命令表达式的管道链，并更新其指向\r\n\t            else {\r\n\t                var previous = result;\r\n\t                while (previous.next !== null) {\r\n\t                    previous = previous.next;\r\n\t                }\r\n\t                previous.next = current;\r\n\t            }\r\n\t        }\r\n\t        // 释放字符串读取器\r\n\t        reader.dispose();\r\n\t        return result;\r\n\t    };\r\n\t    /**\r\n\t     * 根据字符串读取器解析命令表达式。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @param  {StringReader} reader\r\n\t     * @returns CommandExpression\r\n\t     */\r\n\t    CommandExpressionParser.prototype.onParse = function (reader) {\r\n\t        var _a;\r\n\t        var args = new collections.Set(), options = new collections.Map(), anchor, name, path;\r\n\t        // 解析命令表达式中的路径部分，如果表达式有误则该解析方法内部抛出异常\r\n\t        _a = CommandExpressionParser.parsePath(reader), anchor = _a[0], name = _a[1], path = _a[2];\r\n\t        var pair;\r\n\t        // 依次解析命令表达式中的选项和参数\r\n\t        while ((pair = CommandExpressionParser.parsePair(reader)) !== null) {\r\n\t            if (!pair.key) {\r\n\t                args.add(pair.value);\r\n\t            }\r\n\t            else {\r\n\t                options.set(pair.key, pair.value);\r\n\t            }\r\n\t        }\r\n\t        // 返回一个命令表达式\r\n\t        return new (commandExpression.default.bind.apply(commandExpression.default, [void 0, anchor, name, path, options].concat(args.values())))();\r\n\t    };\r\n\t    /**\r\n\t     * 根据字符串读取器解析路径。\r\n\t     * @private\r\n\t     * @static\r\n\t     * @param  {StringReader} reader\r\n\t     * @returns PathAnchor\r\n\t     */\r\n\t    CommandExpressionParser.parsePath = function (reader) {\r\n\t        var state = 0 /* none */, parts = new collections.Set(), valueRead = 0, anchor = 0 /* none */, name = \"\", path = \"\";\r\n\t        while ((valueRead = reader.read()) > 0) {\r\n\t            var chr = String.fromCharCode(valueRead);\r\n\t            // 首先对位于路径中间的点号进行转换，以方便后续的处理\r\n\t            if (chr === \".\" && state === 4 /* part */) {\r\n\t                chr = \"/\";\r\n\t            }\r\n\t            if (chr === \".\") {\r\n\t                switch (state) {\r\n\t                    case 0 /* none */:\r\n\t                        {\r\n\t                            state = 1 /* dot */;\r\n\t                            anchor = 1 /* current */;\r\n\t                            break;\r\n\t                        }\r\n\t                    case 1 /* dot */:\r\n\t                        {\r\n\t                            state = 2 /* doubleDot */;\r\n\t                            anchor = 2 /* parent */;\r\n\t                            break;\r\n\t                        }\r\n\t                    default:\r\n\t                        {\r\n\t                            throw new exceptions.InvalidOperationException(\"Invalid anchor of command path.\");\r\n\t                        }\r\n\t                }\r\n\t            }\r\n\t            else if (chr === \"/\") {\r\n\t                if (state === 3 /* slash */) {\r\n\t                    throw new exceptions.InvalidOperationException(\"Duplicate '/' slash characters.\");\r\n\t                }\r\n\t                if (state === 0 /* none */) {\r\n\t                    anchor = 3 /* root */;\r\n\t                }\r\n\t                else if (state === 4 /* part */) {\r\n\t                    parts.add(name);\r\n\t                    name = \"\";\r\n\t                }\r\n\t                state = 3 /* slash */;\r\n\t            }\r\n\t            else if (common.CharUtils.isLetterOrDigit(chr) || chr === \"_\") {\r\n\t                if (state === 1 /* dot */ || state === 2 /* doubleDot */) {\r\n\t                    throw new exceptions.InvalidOperationException(\"Missing '/' slash character between dot and letter or digit.\");\r\n\t                }\r\n\t                name += chr;\r\n\t                state = 4 /* part */;\r\n\t            }\r\n\t            else if (common.CharUtils.isWhiteSpace(chr)) {\r\n\t                if (state === 0 /* none */) {\r\n\t                    continue;\r\n\t                }\r\n\t                else {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                throw new exceptions.InvalidOperationException(\"Contains '\" + chr + \"' illegal character(s) in the command path.\");\r\n\t            }\r\n\t        }\r\n\t        // 如果路径以斜杠符结尾，即为非法路径格式\r\n\t        if (state === 3 /* slash */ && ((parts && parts.size > 0) || anchor !== 3 /* root */)) {\r\n\t            throw new exceptions.InvalidOperationException(\"The command path can not at the end of '/' character.\");\r\n\t        }\r\n\t        if (parts && parts.size > 0) {\r\n\t            path = parts.values().join(\".\");\r\n\t        }\r\n\t        else if (!name) {\r\n\t            switch (anchor) {\r\n\t                case 3 /* root */:\r\n\t                    name = \"/\";\r\n\t                    break;\r\n\t                case 1 /* current */:\r\n\t                    name = \".\";\r\n\t                    break;\r\n\t                case 2 /* parent */:\r\n\t                    name = \"..\";\r\n\t                    break;\r\n\t            }\r\n\t            anchor = 0 /* none */;\r\n\t        }\r\n\t        return [anchor, name, path];\r\n\t    };\r\n\t    /**\r\n\t     * 根据字符串读取器解析参数和选项。\r\n\t     * @private\r\n\t     * @static\r\n\t     * @param  {StringReader} reader\r\n\t     * @returns KeyValuePair\r\n\t     */\r\n\t    CommandExpressionParser.parsePair = function (reader) {\r\n\t        var quote = \"\\0\", isEscaping = false, key = \"\", value = \"\", state = 0 /* none */, valueRead;\r\n\t        while ((valueRead = reader.read()) > 0) {\r\n\t            var chr = String.fromCharCode(valueRead);\r\n\t            if (chr === \"-\" || chr === \"/\") {\r\n\t                if (state === 1 /* slash */) {\r\n\t                    throw new exceptions.InvalidOperationException(\"Duplicate '\" + chr + \"' option indicator of command expression.\");\r\n\t                }\r\n\t                if (state === 0 /* none */ && quote === \"\\0\") {\r\n\t                    state = 1 /* slash */;\r\n\t                    continue;\r\n\t                }\r\n\t            }\r\n\t            else if (chr === \":\" || chr === \"=\") {\r\n\t                if (key && state === 3 /* part */ && (quote === \"\\0\" && !isEscaping)) {\r\n\t                    state = 2 /* assign */;\r\n\t                    continue;\r\n\t                }\r\n\t            }\r\n\t            else if (chr === \"|\") {\r\n\t                if (quote === \"\\0\") {\r\n\t                    if (!key && !value) {\r\n\t                        return null;\r\n\t                    }\r\n\t                    return new collections.KeyValuePair(key, value);\r\n\t                }\r\n\t            }\r\n\t            else if (common.CharUtils.isWhiteSpace(chr)) {\r\n\t                if (state === 1 /* slash */) {\r\n\t                    throw new exceptions.InvalidOperationException(\"A white-space character at the back of the option indicator.\");\r\n\t                }\r\n\t                if (state === 0 /* none */) {\r\n\t                    continue;\r\n\t                }\r\n\t                else if (quote === \"\\0\") {\r\n\t                    return new collections.KeyValuePair(key, value);\r\n\t                }\r\n\t            }\r\n\t            else if (this.isQuote(chr) && !isEscaping) {\r\n\t                if (quote !== \"\\0\") {\r\n\t                    quote = \"\\0\";\r\n\t                    continue;\r\n\t                }\r\n\t                else if (state !== 3 /* part */) {\r\n\t                    quote = chr;\r\n\t                    continue;\r\n\t                }\r\n\t            }\r\n\t            // 设置转义状态：即当前字符为转义符并且当前状态不为转义状态\r\n\t            isEscaping = chr === \"\\\\\" && (!isEscaping);\r\n\t            if (isEscaping) {\r\n\t                continue;\r\n\t            }\r\n\t            switch (state) {\r\n\t                case 1 /* slash */:\r\n\t                    {\r\n\t                        key += chr;\r\n\t                        break;\r\n\t                    }\r\n\t                case 0 /* none */:\r\n\t                case 2 /* assign */:\r\n\t                    {\r\n\t                        value += chr;\r\n\t                        break;\r\n\t                    }\r\n\t                default:\r\n\t                    {\r\n\t                        if (!value) {\r\n\t                            key += chr;\r\n\t                        }\r\n\t                        else {\r\n\t                            value += chr;\r\n\t                        }\r\n\t                        break;\r\n\t                    }\r\n\t            }\r\n\t            state = 3 /* part */;\r\n\t        }\r\n\t        if (!key && !value) {\r\n\t            return null;\r\n\t        }\r\n\t        return new collections.KeyValuePair(key, value);\r\n\t    };\r\n\t    /**\r\n\t     * 检测一个 char 字符是否为引号。\r\n\t     * @private\r\n\t     * @static\r\n\t     * @param  {string} chr\r\n\t     * @returns boolean\r\n\t     */\r\n\t    CommandExpressionParser.isQuote = function (chr) {\r\n\t        return (chr === '\"' || chr === \"\\'\");\r\n\t    };\r\n\t    /**\r\n\t     * 获取命令解析器的单实例。\r\n\t     * @static\r\n\t     * @member\r\n\t     */\r\n\t    CommandExpressionParser.instance = new CommandExpressionParser();\r\n\t    return CommandExpressionParser;\r\n\t}());\r\n\texports.default = CommandExpressionParser;\r\n\t});\r\n\r\n\tunwrapExports(commandExpressionParser);\r\n\r\n\tvar commandExecutorContext = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\t/**\r\n\t * 表示命令执行器在执行命令时产生的上下文。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar CommandExecutorContext = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化命令执行器上下文的新实例。\r\n\t     * @constructor\r\n\t     * @param  {ICommandExecutor} executor 当前命令执行器对象。\r\n\t     * @param  {CommandExpression} expression 当前命令执行器的命令表达式。\r\n\t     * @param  {any} parameter 从命令执行器传入的参数。\r\n\t     */\r\n\t    function CommandExecutorContext(executor, expression, parameter) {\r\n\t        if (!executor || !expression) {\r\n\t            throw new exceptions.ArgumentException();\r\n\t        }\r\n\t        this._executor = executor;\r\n\t        this._expression = expression;\r\n\t        this._parameter = parameter;\r\n\t    }\r\n\t    Object.defineProperty(CommandExecutorContext.prototype, \"executor\", {\r\n\t        /**\r\n\t         * 获取当前命令执行器对象。\r\n\t         * @property\r\n\t         * @returns ICommandExecutor\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._executor;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandExecutorContext.prototype, \"expression\", {\r\n\t        /**\r\n\t         * 获取当前命令执行器的命令表达式。\r\n\t         * @property\r\n\t         * @returns CommandExpression\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._expression;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(CommandExecutorContext.prototype, \"parameter\", {\r\n\t        /**\r\n\t         * 获取从命令执行器传入的参数值。\r\n\t         * @property\r\n\t         * @returns any\r\n\t         */\r\n\t        get: function () {\r\n\t            return this._parameter;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    return CommandExecutorContext;\r\n\t}());\r\n\texports.default = CommandExecutorContext;\r\n\t});\r\n\r\n\tunwrapExports(commandExecutorContext);\r\n\r\n\tvar commandExecutor = createCommonjsModule(function (module, exports) {\r\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n\t    return new (P || (P = Promise))(function (resolve, reject) {\r\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n\t        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n\t    });\r\n\t};\r\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\r\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\r\n\t    function step(op) {\r\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\r\n\t        while (_) try {\r\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\r\n\t            switch (op[0]) {\r\n\t                case 0: case 1: t = op; break;\r\n\t                case 4: _.label++; return { value: op[1], done: false };\r\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n\t                default:\r\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n\t                    if (t[2]) _.ops.pop();\r\n\t                    _.trys.pop(); continue;\r\n\t            }\r\n\t            op = body.call(thisArg, _);\r\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n\t    }\r\n\t};\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * 提供命令注册与执行的实现。\r\n\t * @class\r\n\t * @version 1.0.0\r\n\t */\r\n\tvar CommandExecutor = /** @class */ (function () {\r\n\t    /**\r\n\t     * 初始化命令执行器的新实例。\r\n\t     * @param parser 命令行文本解析\r\n\t     * @constructor\r\n\t     */\r\n\t    function CommandExecutor(parser) {\r\n\t        this._commands = new commandCollection.default();\r\n\t        this._parser = parser || commandExpressionParser.default.instance;\r\n\t    }\r\n\t    Object.defineProperty(CommandExecutor, \"default\", {\r\n\t        /**\r\n\t         * 获取或设置默认的命令执行器。\r\n\t         * @static\r\n\t         * @property\r\n\t         * @returns CommandExecutor\r\n\t         */\r\n\t        get: function () {\r\n\t            if (!this._default) {\r\n\t                this._default = new CommandExecutor();\r\n\t            }\r\n\t            return this._default;\r\n\t        },\r\n\t        /**\r\n\t         * 获取或设置默认的命令执行器。\r\n\t         * @static\r\n\t         * @property\r\n\t         * @param  {CommandExecutor} value\r\n\t         */\r\n\t        set: function (value) {\r\n\t            if (!value) {\r\n\t                throw new exceptions.ArgumentException(\"value\");\r\n\t            }\r\n\t            this._default = value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * 注册一个命令。\r\n\t     * 注意: 如果路径已存在，则会抛出一个异常。\r\n\t     * @param  {string} path 命令路径。\r\n\t     * @param  {ICommand} command 命令实例。\r\n\t     * @returns void\r\n\t     */\r\n\t    CommandExecutor.prototype.register = function (path, command) {\r\n\t        this._commands.add(path, command);\r\n\t    };\r\n\t    /**\r\n\t     * 移除指定路径的命令。\r\n\t     * @param  {string} path\r\n\t     * @returns boolean\r\n\t     */\r\n\t    CommandExecutor.prototype.remove = function (path) {\r\n\t        return this._commands.remove(path);\r\n\t    };\r\n\t    /**\r\n\t     * 查找指定路径的命令。\r\n\t     * @param  {string} path 路径字符串。\r\n\t     * @returns ICommand\r\n\t     */\r\n\t    CommandExecutor.prototype.find = function (path) {\r\n\t        return this._commands.find(path);\r\n\t    };\r\n\t    /**\r\n\t     * 执行命令。\r\n\t     * @summary 暂不支持表达式，commandText 仅为命令路径。\r\n\t     * @async\r\n\t     * @param  {string} commandText 指定要执行的命令表达式文本。\r\n\t     * @param  {any} parameter 指定的输入参数。\r\n\t     * @returns any 返回命令执行的结果。\r\n\t     */\r\n\t    CommandExecutor.prototype.execute = function (commandText, parameter) {\r\n\t        if (parameter === void 0) { parameter = null; }\r\n\t        return __awaiter(this, void 0, void 0, function () {\r\n\t            var context, result;\r\n\t            return __generator(this, function (_a) {\r\n\t                if (!commandText) {\r\n\t                    throw new exceptions.ArgumentException();\r\n\t                }\r\n\t                context = null;\r\n\t                try {\r\n\t                    // 创建命令执行器上下文\r\n\t                    context = this.createExecutorContext(commandText, parameter);\r\n\t                    if (!context) {\r\n\t                        throw new exceptions.InvalidOperationException(\"Create executor context failed.\");\r\n\t                    }\r\n\t                }\r\n\t                catch (ex) {\r\n\t                    diagnostics.Logger.error(this, ex);\r\n\t                    return [2 /*return*/, null];\r\n\t                }\r\n\t                result = this.onExecute(context);\r\n\t                return [2 /*return*/, result];\r\n\t            });\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 当执行命令时调用。\r\n\t     * @async\r\n\t     * @param  {CommandExecutorContext} context 命令执行上下文。\r\n\t     * @returns any\r\n\t     */\r\n\t    CommandExecutor.prototype.onExecute = function (context) {\r\n\t        return __awaiter(this, void 0, void 0, function () {\r\n\t            var entries, expression, command, parameter, i, len, entry;\r\n\t            return __generator(this, function (_a) {\r\n\t                switch (_a.label) {\r\n\t                    case 0:\r\n\t                        entries = new Array(), expression = context.expression;\r\n\t                        while (expression !== null) {\r\n\t                            command = this.find(expression.fullPath);\r\n\t                            // 如果指定的路径不存在的则抛出异常\r\n\t                            if (!command) {\r\n\t                                throw new exceptions.InvalidOperationException(\"The command path \\\"\" + expression.fullPath + \"\\\" can not found.\");\r\n\t                            }\r\n\t                            // 将找到的命令表达式和对应的节点加入数组中\r\n\t                            entries.push([expression, command]);\r\n\t                            // 设置下一个待搜索的命令表达式\r\n\t                            expression = expression.next;\r\n\t                        }\r\n\t                        parameter = context.parameter;\r\n\t                        // 如果列表为空，则返回空\r\n\t                        if (entries.length < 1) {\r\n\t                            return [2 /*return*/, null];\r\n\t                        }\r\n\t                        i = 0, len = entries.length;\r\n\t                        _a.label = 1;\r\n\t                    case 1:\r\n\t                        if (!(i < len)) return [3 /*break*/, 4];\r\n\t                        entry = entries[0];\r\n\t                        return [4 /*yield*/, this.executeCommand(context, entry[0], entry[1], parameter)];\r\n\t                    case 2:\r\n\t                        // 执行命令\r\n\t                        parameter = _a.sent();\r\n\t                        _a.label = 3;\r\n\t                    case 3:\r\n\t                        i++;\r\n\t                        return [3 /*break*/, 1];\r\n\t                    case 4: \r\n\t                    // 返回最后一个命令的执行结果\r\n\t                    return [2 /*return*/, parameter];\r\n\t                }\r\n\t            });\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 执行命令。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @async\r\n\t     * @param  {CommandExecutorContext} context\r\n\t     * @param  {CommandExpression} expression\r\n\t     * @param  {ICommand} command\r\n\t     * @param  {any} parameter\r\n\t     * @returns any\r\n\t     */\r\n\t    CommandExecutor.prototype.executeCommand = function (context, expression, command, parameter) {\r\n\t        return __awaiter(this, void 0, void 0, function () {\r\n\t            var result;\r\n\t            return __generator(this, function (_a) {\r\n\t                switch (_a.label) {\r\n\t                    case 0:\r\n\t                        if (!context || !expression) {\r\n\t                            throw new exceptions.ArgumentException();\r\n\t                        }\r\n\t                        if (!command) {\r\n\t                            return [2 /*return*/, null];\r\n\t                        }\r\n\t                        return [4 /*yield*/, command.execute(this.createCommandContext(expression, command, parameter))];\r\n\t                    case 1:\r\n\t                        result = _a.sent();\r\n\t                        return [2 /*return*/, result];\r\n\t                }\r\n\t            });\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 创建命令执行上下文实例。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @param  {string} commandText\r\n\t     * @param  {any} parameter\r\n\t     * @returns CommandExecutorContext\r\n\t     */\r\n\t    CommandExecutor.prototype.createExecutorContext = function (commandText, parameter) {\r\n\t        // 解析当前命令文本\r\n\t        var expression = this.onParse(commandText);\r\n\t        if (!expression) {\r\n\t            throw new exceptions.InvalidOperationException(\"Invalid command expression text: \" + commandText + \".\");\r\n\t        }\r\n\t        return new commandExecutorContext.default(this, expression, parameter);\r\n\t    };\r\n\t    /**\r\n\t     * 创建命令上下文实例。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @param  {CommandExpression} expression\r\n\t     * @param  {ICommand} command\r\n\t     * @param  {any} parameter\r\n\t     * @returns CommandContext\r\n\t     */\r\n\t    CommandExecutor.prototype.createCommandContext = function (expression, command, parameter) {\r\n\t        return new commandContext.default(this, expression, command, parameter);\r\n\t    };\r\n\t    /**\r\n\t     * 当解析命令表达式时调用。\r\n\t     * @protected\r\n\t     * @virtual\r\n\t     * @param  {string} text\r\n\t     * @returns CommandExpression\r\n\t     */\r\n\t    CommandExecutor.prototype.onParse = function (text) {\r\n\t        return this._parser.parse(text);\r\n\t    };\r\n\t    return CommandExecutor;\r\n\t}());\r\n\texports.default = CommandExecutor;\r\n\t});\r\n\r\n\tunwrapExports(commandExecutor);\r\n\r\n\tvar command_1 = createCommonjsModule(function (module, exports) {\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * 标注当前类型是一个可通过命令执行器执行的命令。\r\n\t * @param  {string} path\r\n\t */\r\n\tfunction command(path) {\r\n\t    if (!path) {\r\n\t        throw new exceptions.InvalidOperationException(\"The command path is empty.\");\r\n\t    }\r\n\t    return function (commandType) {\r\n\t        if (!runtime.Type.isAssignableFrom(commandBase.default, commandType)) {\r\n\t            throw new exceptions.InvalidOperationException(\"The class \\\"\" + runtime.Type.getQualifiedClassName(commandType) + \"\\\" is not a command type.\");\r\n\t        }\r\n\t        // 生成命令实例\r\n\t        var command = reflection.Activator.createInstance(commandType);\r\n\t        // 注册至默认的执行器中\r\n\t        commandExecutor.default.default.register(path, command);\r\n\t    };\r\n\t}\r\n\texports.default = command;\r\n\t});\r\n\r\n\tunwrapExports(command_1);\r\n\r\n\tvar commands = createCommonjsModule(function (module, exports) {\r\n\t/*!\r\n\t * @Authors:\r\n\t *      jason <jasonsoop@gmail.com>\r\n\t *      Evan <skcy@vip.qq.com>\r\n\t *\r\n\t * @Date:  2019-06-25 16:05:55\r\n\t * @version: 1.0.0\r\n\t * Licensed under the MIT License.\r\n\t * Copyright (C) 2010-present UXmid Inc. All rights reserved.\r\n\t */\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\n\texports.CommandBase = commandBase.default;\r\n\r\n\texports.CommandCollection = commandCollection.default;\r\n\r\n\texports.CommandContext = commandContext.default;\r\n\r\n\texports.CommandExecutor = commandExecutor.default;\r\n\r\n\texports.CommandExecutorContext = commandExecutorContext.default;\r\n\r\n\texports.CommandExpression = commandExpression.default;\r\n\r\n\texports.CommandExpressionParser = commandExpressionParser.default;\r\n\r\n\texports.CommandOptionCollection = commandOptionCollection.default;\r\n\r\n\texports.Command = command_1.default;\r\n\t});\r\n\r\n\tunwrapExports(commands);\r\n\tvar commands_1 = commands.CommandBase;\r\n\tvar commands_2 = commands.CommandCollection;\r\n\tvar commands_3 = commands.CommandContext;\r\n\tvar commands_4 = commands.CommandExecutor;\r\n\tvar commands_5 = commands.CommandExecutorContext;\r\n\tvar commands_6 = commands.CommandExpression;\r\n\tvar commands_7 = commands.CommandExpressionParser;\r\n\tvar commands_8 = commands.CommandOptionCollection;\r\n\tvar commands_9 = commands.Command;\r\n\r\n\tvar exports_1 = createCommonjsModule(function (module, exports) {\r\n\t/*!\r\n\t * @Authors:\r\n\t *      jason <jasonsoop@gmail.com>\r\n\t *      Evan <skcy@vip.qq.com>\r\n\t *\r\n\t * @Date:  2019-06-25 16:05:55\r\n\t * @version: 1.0.0\r\n\t * Licensed under the MIT License.\r\n\t * Copyright (C) 2010-present UXmid Inc. All rights reserved.\r\n\t */\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t__export(application$1);\r\n\t__export(broadcast$1);\r\n\t__export(collections);\r\n\t__export(commands);\r\n\t__export(common);\r\n\t__export(diagnostics);\r\n\t__export(events);\r\n\t__export(exceptions);\r\n\t__export(io);\r\n\t__export(reflection);\r\n\t__export(runtime);\r\n\t__export(services);\r\n\t});\r\n\r\n\tunwrapExports(exports_1);\r\n\r\n\tvar bin = createCommonjsModule(function (module, exports) {\r\n\t/*!\r\n\t * @Authors:\r\n\t *      jason <jasonsoop@gmail.com>\r\n\t *      Evan <skcy@vip.qq.com>\r\n\t *\r\n\t * @Date:  2019-06-25 16:05:55\r\n\t * @version: 1.0.0\r\n\t * Licensed under the MIT License.\r\n\t * Copyright (C) 2010-present UXmid Inc. All rights reserved.\r\n\t */\r\n\tvar __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {\r\n\t    __assign = Object.assign || function(t) {\r\n\t        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n\t            s = arguments[i];\r\n\t            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n\t                t[p] = s[p];\r\n\t        }\r\n\t        return t;\r\n\t    };\r\n\t    return __assign.apply(this, arguments);\r\n\t};\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t__export(exports_1);\r\n\tvar uxmid = exports_1;\r\n\texports.default = __assign({}, uxmid);\r\n\t});\r\n\r\n\tvar index = unwrapExports(bin);\r\n\r\n\treturn index;\r\n\r\n}));\r\n\n\n//# sourceURL=webpack://_dll/./node_modules/uxmid-core/dist/uxmid.js?");

/***/ }),

/***/ "?aadf":
/*!*****************!*\
  !*** dll uxmid ***!
  \*****************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__;\n\n//# sourceURL=webpack://_dll/dll_uxmid?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module doesn't tell about it's top-level declarations so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("?aadf");
/******/ 	uxmid_dll = __webpack_exports__;
/******/ 	
/******/ })()
;